{"comments":[{"id":"IC_kwDOKimTEs7Bk73P","author":{"login":"claude"},"authorAssociation":"CONTRIBUTOR","body":"**Claude finished @drewstone's task** â€”â€” [View job](https://github.com/tangle-network/blueprint/actions/runs/17423436780)\n\n---\n### OAuth and Example Blueprints PR Review\n\n## Summary\n\nThis is a comprehensive implementation adding OAuth 2.0 JWT Bearer Assertion support and two example blueprints to the Tangle Blueprint system. The PR demonstrates solid security practices, good architecture, and thorough testing.\n\n## ðŸŸ¢ Strengths\n\n### OAuth Implementation (`crates/auth/src/oauth/`)\n- **Spec Compliance**: Properly implements RFC 7523 JWT Bearer Assertion flow\n- **Security**: Comprehensive validation including signature verification, replay protection via JTI tracking, and proper JWT claim validation\n- **Architecture**: Clean separation with dedicated modules and per-service policy configuration\n- **Algorithm Support**: Supports both RS256 and ES256 with proper key handling\n- **Error Handling**: Follows OAuth 2.0 error response format with appropriate status codes\n\n### Example Blueprints\n- **Practical Examples**: Both oauth-blueprint and apikey-blueprint demonstrate real-world usage patterns\n- **Scope-based Access Control**: OAuth blueprint properly enforces scope requirements (`docs:write`, `docs:admin`)\n- **Tenant Isolation**: Both examples implement proper multi-tenant data separation\n- **Test Coverage**: Comprehensive unit and integration tests\n\n## ðŸŸ¡ Areas for Improvement\n\n### Security Considerations\n\n1. **API Key Storage in Example** (`examples/apikey-blueprint/apikey-blueprint-lib/src/lib.rs:68`)\n   ```rust\n   \"encrypted_key\": api_key, // WARNING: Should be encrypted with user's public key!\n   ```\n   **Issue**: API key is returned in plaintext in the example. While marked as a warning, this could mislead developers.\n   **Recommendation**: Implement proper encryption or remove the plaintext key from response.\n\n2. **Rate Limiting Scope** (`crates/auth/src/oauth/mod.rs:24`)\n   ```rust\n   let ip = headers.get(axum::http::header::FORWARDED)...unwrap_or(\"unknown\");\n   ```\n   **Issue**: Rate limiting by IP from `FORWARDED` header can be bypassed and defaults to \"unknown\" for all clients without the header.\n   **Recommendation**: Use `X-Forwarded-For` or `X-Real-IP` as fallbacks, and consider per-service-id limits as primary mechanism.\n\n3. **Clock Skew Handling** (`crates/auth/src/oauth/mod.rs:222`)\n   ```rust\n   let skew: u64 = 60;\n   ```\n   **Issue**: 60-second skew is reasonable but hardcoded.\n   **Recommendation**: Make clock skew configurable per service policy for flexibility.\n\n### Performance Considerations\n\n4. **Multiple Key Verification** (`crates/auth/src/oauth/mod.rs:168-199`)\n   ```rust\n   for pem in &policy.public_keys_pem {\n       // Try each key until one validates...\n   ```\n   **Issue**: Sequential key verification could be slow with many keys.\n   **Recommendation**: Consider caching decoded keys or implementing key hinting via JWT `kid` parameter.\n\n5. **Database Operations** (`crates/auth/src/oauth/mod.rs:244-247`)\n   **Issue**: JTI replay protection requires DB write for every token verification.\n   **Recommendation**: Consider using in-memory cache with TTL for frequently accessed JTIs.\n\n### Code Quality\n\n6. **Error Handling Inconsistency**\n   - Some database errors are swallowed and converted to generic messages\n   - Consider preserving more error context for debugging while sanitizing for client responses\n\n7. **Magic Numbers**\n   - Rate limit window (60 seconds) and max requests (120) are hardcoded\n   - TTL minimums (60 seconds) are hardcoded\n\n## ðŸŸ¢ Excellent Patterns\n\n### Database Design\n- Proper column family usage for different data types (JTI, rate limiting, policies)\n- Atomic operations for replay protection\n\n### Testing Strategy\n- Comprehensive OAuth flow testing with real RSA key generation\n- Property-based testing for edge cases\n- E2E testing with actual Tangle network integration\n\n### Documentation\n- Clear README explaining OAuth flow and configuration\n- Inline comments explaining security decisions\n- Future work section identifying improvement areas\n\n## ðŸ”§ Minor Issues\n\n### Code Style\n- Some long function signatures could be broken into multiple lines\n- Consider extracting validation constants to a config module\n\n### Documentation Updates\n- `crates/auth/AUTH_WORKFLOW.md` was significantly modified (-438/+98 lines) - ensure important workflow information wasn't lost\n\n## ðŸš€ Future Recommendations\n\nThe OAuth README already identifies key improvements:\n1. **JWKS Support**: Implement automatic key fetching/rotation\n2. **DPoP Enforcement**: Complete the proof-of-possession implementation\n3. **Enhanced Rate Limiting**: Consider distributed rate limiting for multi-replica deployments\n4. **Observability**: Add metrics and structured logging for security events\n\n## âœ… Verdict\n\nThis is a well-architected implementation that follows security best practices. The identified issues are primarily minor improvements rather than blocking security concerns. The code demonstrates good understanding of OAuth 2.0 security principles and provides solid foundation for production use.\n\n**Recommendation: Approve** with consideration of the security improvements mentioned above for future iterations.\n\n---","createdAt":"2025-09-03T04:56:11Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/tangle-network/blueprint/pull/1140#issuecomment-3247685071","viewerDidAuthor":false}],"reviews":[{"id":"PRR_kwDOKimTEs69ji9n","author":{"login":"cursor"},"authorAssociation":"NONE","body":"### This PR is being reviewed by Cursor Bugbot\n\n<details>\n<summary>Details</summary>\n\nYou are on the Bugbot Free tier. On this plan, Bugbot will review limited PRs each billing cycle.\n\nTo receive Bugbot reviews on all of your PRs, please upgrade to Bugbot Pro by visiting the [Cursor dashboard](https://www.cursor.com/dashboard?tab=bugbot). Your first 14 days will be free!\n</details>\n\n","submittedAt":"2025-09-03T11:32:02Z","includesCreatedEdit":false,"reactionGroups":[],"state":"COMMENTED","commit":{"oid":"7ad37478495864f196d67c4cead05afdb508998f"}},{"id":"PRR_kwDOKimTEs7Ada2i","author":{"login":"shekohex"},"authorAssociation":"MEMBER","body":"Overall Looks good, but there are a few things that does not make sense, or should I say does not make a good example of the usage of the api. ","submittedAt":"2025-09-16T10:22:51Z","includesCreatedEdit":false,"reactionGroups":[],"state":"CHANGES_REQUESTED","commit":{"oid":"7ad37478495864f196d67c4cead05afdb508998f"}},{"id":"PRR_kwDOKimTEs7AkIfD","author":{"login":"drewstone"},"authorAssociation":"MEMBER","body":"","submittedAt":"2025-09-16T16:01:39Z","includesCreatedEdit":false,"reactionGroups":[],"state":"COMMENTED","commit":{"oid":"7ad37478495864f196d67c4cead05afdb508998f"}},{"id":"PRR_kwDOKimTEs7Aqz40","author":{"login":"Tjemmmic"},"authorAssociation":"MEMBER","body":"","submittedAt":"2025-09-17T03:30:18Z","includesCreatedEdit":false,"reactionGroups":[],"state":"COMMENTED","commit":{"oid":"7ad37478495864f196d67c4cead05afdb508998f"}}]}
[{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2318679127","pull_request_review_id":3180212071,"id":2318679127,"node_id":"PRRC_kwDOKimTEs6KNDxX","diff_hunk":"@@ -0,0 +1,189 @@\n+// SPDX-License-Identifier: UNLICENSE\n+pragma solidity >=0.8.13;\n+\n+import \"tnt-core/BlueprintServiceManagerBase.sol\";\n+\n+/**\n+ * @title ExperimentalBlueprint\n+ * @dev API Key Blueprint that manages subscription tiers and usage tracking\n+ * @dev Follows BlueprintServiceManagerBase spec for automatic job-to-hook wiring\n+ */\n+contract ExperimentalBlueprint is BlueprintServiceManagerBase {\n+    // Events for job execution tracking\n+    event ApiKeyPurchased(\n+        address indexed user,\n+        string tier,\n+        uint256 amount,\n+        uint256 timestamp,\n+        uint64 indexed serviceId,\n+        uint64 indexed callId\n+    );\n+\n+    event ResourceWritten(\n+        address indexed user,\n+        string resourceId,\n+        bytes32 indexed tenantHash,\n+        uint64 indexed serviceId,\n+        uint64 indexed callId\n+    );\n+\n+    // Job IDs that correspond to Rust job constants\n+    uint8 public constant WHOAMI_JOB_ID = 0;\n+    uint8 public constant WRITE_RESOURCE_JOB_ID = 1;\n+    uint8 public constant PURCHASE_API_KEY_JOB_ID = 2;\n+    uint8 public constant ECHO_JOB_ID = 3;\n+\n+    // Subscription tier pricing (in wei)\n+    mapping(string => uint256) public tierPricing;\n+    \n+    // User subscription data\n+    mapping(address => string) public userTiers;\n+    mapping(address => uint256) public subscriptionExpiry;\n+    \n+    // Resource tracking per tenant\n+    mapping(bytes32 => mapping(string => bool)) public tenantResources;\n+    mapping(bytes32 => uint256) public tenantResourceCount;\n+\n+    // Job call tracking\n+    mapping(uint64 => mapping(uint64 => bool)) public processedJobCalls;\n+\n+    constructor() {\n+        // Initialize tier pricing\n+        tierPricing[\"basic\"] = 0.01 ether;\n+        tierPricing[\"premium\"] = 0.05 ether; \n+        tierPricing[\"enterprise\"] = 0.1 ether;\n+    }\n+\n+    /**\n+     * @dev Hook called automatically when any job is submitted from Rust\n+     * @dev This is triggered before job execution on the Rust side\n+     */\n+    function onJobCall(\n+        uint64 serviceId,\n+        uint8 job,\n+        uint64 jobCallId,\n+        bytes calldata inputs\n+    ) external payable override onlyFromMaster {\n+        // Track that this job call was received\n+        processedJobCalls[serviceId][jobCallId] = true;\n+\n+        if (job == PURCHASE_API_KEY_JOB_ID) {\n+            // Decode subscription tier from inputs\n+            // inputs[0] should be the tier string\n+            require(inputs.length > 0, \"Missing tier input\");\n+            string memory tier = abi.decode(inputs, (string));\n+            \n+            require(msg.value > 0, \"Payment required for API key purchase\");\n+            require(tierPricing[tier] > 0, \"Invalid subscription tier\");\n+            require(msg.value >= tierPricing[tier], \"Insufficient payment\");\n+\n+            // Update user subscription immediately on job call\n+            userTiers[tx.origin] = tier; // tx.origin is the original caller\n+            subscriptionExpiry[tx.origin] = block.timestamp + 30 days;\n+\n+            emit ApiKeyPurchased(\n+                tx.origin,\n+                tier,\n+                msg.value,\n+                block.timestamp,\n+                serviceId,\n+                jobCallId\n+            );\n+\n+            // Refund excess payment\n+            if (msg.value > tierPricing[tier]) {\n+                payable(tx.origin).transfer(msg.value - tierPricing[tier]);","path":"examples/apikey-blueprint/contracts/src/ExperimentalBlueprint.sol","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"cursor[bot]","id":206951365,"node_id":"BOT_kgDODFXTxQ","avatar_url":"https://avatars.githubusercontent.com/in/1210556?v=4","gravatar_id":"","url":"https://api.github.com/users/cursor%5Bbot%5D","html_url":"https://github.com/apps/cursor","followers_url":"https://api.github.com/users/cursor%5Bbot%5D/followers","following_url":"https://api.github.com/users/cursor%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/cursor%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/cursor%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cursor%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/cursor%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/cursor%5Bbot%5D/repos","events_url":"https://api.github.com/users/cursor%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/cursor%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"body":"### Bug: `tx.origin` Vulnerability in Subscription Handling\n\n<!-- DESCRIPTION START -->\nThe `onJobCall` function uses `tx.origin` for assigning subscriptions and refunding excess payment. This is a security anti-pattern, as `tx.origin` refers to the original transaction initiator, not the immediate caller. This can lead to incorrect subscription assignments and funds being sent to unintended addresses.\n<!-- DESCRIPTION END -->\n\n<!-- LOCATIONS START\nexamples/apikey-blueprint/contracts/src/ExperimentalBlueprint.sol#L80-L95\nLOCATIONS END -->\n<a href=\"https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OmU1ZTExNzlmLTNmNzQtNDUwZC04NjdlLTFmOTE4MWMwNWY3MiIsImVuY3J5cHRpb25LZXkiOiJsZmgyekNuRFY4VGZ3enlnV3RhMm1vM0JLZHZ5WmFJZTFCbVduNWdteWFFIiwiYnJhbmNoIjoiZHJldy9vYXV0aC1ibHVlcHJpbnQtYXV0aCJ9LCJpYXQiOjE3NTY4OTkxMjEsImV4cCI6MTc1NzUwMzkyMX0.B9wFA6xks3ii3TKHIraOomua4LugdLz0ZxIRMmcQxOidfzqR5Qj0E9Lm0pnAQHmxj81Gwm58cRyMNXa2fve-i4twz9qYPyT_5COeA4fBFMqaz9pLKAJV29cHb12VrH79tyyyMlxnFQD2DkMr7qsVPHCbAZvbEU67GC8RLNkjdP9mC4_Bfq96gxhXJJ6Jbofv-ZaQOEgduyTH7FiTg6w4khvWkHEfDOkaFjPlLoRNSqjuoF2yIb9oHK-dOGKP0Yleg9-WOsbOpBot_qxM3NjlBAxRu7WO7qFAdpY1WK-Ab_LvUn47XLvdOetVlre4eYY-6Hdu1dfDB4wgaHkSjRNIPw\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://cursor.com/fix-in-cursor-dark.svg\"><source media=\"(prefers-color-scheme: light)\" srcset=\"https://cursor.com/fix-in-cursor-light.svg\"><img alt=\"Fix in Cursor\" src=\"https://cursor.com/fix-in-cursor.svg\"></picture></a>&nbsp;<a href=\"https://cursor.com/agents?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9XRUIiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OmU1ZTExNzlmLTNmNzQtNDUwZC04NjdlLTFmOTE4MWMwNWY3MiIsImVuY3J5cHRpb25LZXkiOiJsZmgyekNuRFY4VGZ3enlnV3RhMm1vM0JLZHZ5WmFJZTFCbVduNWdteWFFIiwiYnJhbmNoIjoiZHJldy9vYXV0aC1ibHVlcHJpbnQtYXV0aCIsInJlcG9Pd25lciI6InRhbmdsZS1uZXR3b3JrIiwicmVwb05hbWUiOiJibHVlcHJpbnQiLCJwck51bWJlciI6MTE0MCwiY29tbWl0U2hhIjoiN2FkMzc0Nzg0OTU4NjRmMTk2ZDY3YzRjZWFkMDVhZmRiNTA4OTk4ZiJ9LCJpYXQiOjE3NTY4OTkxMjEsImV4cCI6MTc1NzUwMzkyMX0.Ll6y0BUXL6YJCJ3o1EoU5XR37NVvzyq1WiSFWAepbfSudvw0IlJJ0lNL0toGpZeRyes9w7IbJJ2O7nd7rtJu0DJZiw7TuAlstB-cswRIzEfOFd0TEbW8g_bOHFB0T0WzD8JP6-59FmIOa3hyR9cVm94s6AvytPWPDteg2tsGOUgn0sEMIXyomke6dokNxAlwosbuka2yIrlWnmjd3Ad0x_2PkR9qfG-hrtVIZa6I9JM5bP-osurqWANqXccdprYn6FCjQZwCeb_zCGq5h_TJ0a2WxAwC8yGDIDPZVIwdfYC9i4HCqe2PoLmHCJu4bV2ALY4Rh3_nYHjjvPWZ1F2xEw\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://cursor.com/fix-in-web-dark.svg\"><source media=\"(prefers-color-scheme: light)\" srcset=\"https://cursor.com/fix-in-web-light.svg\"><img alt=\"Fix in Web\" src=\"https://cursor.com/fix-in-web.svg\"></picture></a>\n\n","created_at":"2025-09-03T11:32:01Z","updated_at":"2025-09-03T11:32:02Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2318679127","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"NONE","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2318679127"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2318679127"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2318679127/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":null,"original_line":95,"side":"RIGHT","original_position":95,"position":1,"subject_type":"line"},{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2318679139","pull_request_review_id":3180212071,"id":2318679139,"node_id":"PRRC_kwDOKimTEs6KNDxj","diff_hunk":"@@ -0,0 +1,37 @@\n+[profile.default]\n+src = \"contracts/src\"\n+test = \"contracts/test\"\n+out = \"contracts/out\"\n+script = \"contracts/script\"\n+cache_path = \"contracts/cache\"\n+broadcast = \"contracts/broadcast\"\n+libs = [\"dependencies\"]\n+auto_detect_remappings = true\n+\n+[soldeer]\n+recursive_deps = true\n+remappings_location = \"txt\"\n+remappings_version = false\n+\n+[dependencies]\n+tnt-core = { version = \"0.5.0\", git = \"https://github.com/tangle-network/tnt-core\" }\n+\n+[profile.default]\n+src = \"contracts/src\"\n+test = \"contracts/test\"\n+out = \"contracts/out\"\n+script = \"contracts/script\"\n+cache_path = \"contracts/cache\"\n+broadcast = \"contracts/broadcast\"\n+libs = [\"dependencies\"]\n+auto_detect_remappings = true\n+\n+[soldeer]\n+recursive_deps = true\n+remappings_location = \"txt\"\n+remappings_version = false\n+\n+[dependencies]\n+tnt-core = { version = \"0.5.0\", git = \"https://github.com/tangle-network/tnt-core\" }\n+\n+# See more config options https://github.com/foundry-rs/foundry/blob/master/crates/config/README.md#all-options","path":"examples/oauth-blueprint/foundry.toml","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"cursor[bot]","id":206951365,"node_id":"BOT_kgDODFXTxQ","avatar_url":"https://avatars.githubusercontent.com/in/1210556?v=4","gravatar_id":"","url":"https://api.github.com/users/cursor%5Bbot%5D","html_url":"https://github.com/apps/cursor","followers_url":"https://api.github.com/users/cursor%5Bbot%5D/followers","following_url":"https://api.github.com/users/cursor%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/cursor%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/cursor%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cursor%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/cursor%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/cursor%5Bbot%5D/repos","events_url":"https://api.github.com/users/cursor%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/cursor%5Bbot%5D/received_events","type":"Bot","user_view_type":"public","site_admin":false},"body":"### Bug: Duplicate Configuration Sections in `foundry.toml`\n\n<!-- DESCRIPTION START -->\nThe `foundry.toml` file contains an exact duplication of the `[profile.default]`, `[soldeer]`, and `[dependencies]` configuration sections. This repetition could lead to parsing issues, unexpected behavior, or build problems.\n<!-- DESCRIPTION END -->\n\n<!-- LOCATIONS START\nexamples/oauth-blueprint/foundry.toml#L18-L37\nLOCATIONS END -->\n<a href=\"https://cursor.com/open?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9DVVJTT1IiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OmVlMjNhMDcyLTIzM2ItNDQ0Ni1hYjdjLWNjMzU4MTU4MGQzYSIsImVuY3J5cHRpb25LZXkiOiJyNjVpMkhqaUZPdXcyY1RtY3B4RktKbUxvLWlMaF8wZms0WHpNNlFhZ1prIiwiYnJhbmNoIjoiZHJldy9vYXV0aC1ibHVlcHJpbnQtYXV0aCJ9LCJpYXQiOjE3NTY4OTkxMjEsImV4cCI6MTc1NzUwMzkyMX0.CC1t8hNBx2SKiSuB5NiFWLjvcO9Yqe-x4bvq4nv0_zaamqLmZZob8P_-rMDY9jkm_XPSfl3DcjT5qR3CgxI86jqaSwKSLmYL1c-uoUtL3FtRGObwResXfUQPA3DxQwptlEeeRh74DMxKi5_j6ei7vvDeQQocadDIZ8jDbfRE0dHrha3E5tAUxd9YNTrKuvlwCfH946zsmCPj1RtaQEHGrkGfkGlxi3n6xE3aKrPLQlNou57j94p7sQu31LF1Q6baeQprm7Xtlf7Gl8tJ-sxKjPWMI0DOyRdklU8Gthcig-Ffkjc9Ylx0neAjM4g5750d80m-cAzjKZGksuRYG694SA\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://cursor.com/fix-in-cursor-dark.svg\"><source media=\"(prefers-color-scheme: light)\" srcset=\"https://cursor.com/fix-in-cursor-light.svg\"><img alt=\"Fix in Cursor\" src=\"https://cursor.com/fix-in-cursor.svg\"></picture></a>&nbsp;<a href=\"https://cursor.com/agents?data=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJ1Z2JvdC12MSJ9.eyJ2ZXJzaW9uIjoxLCJ0eXBlIjoiQlVHQk9UX0ZJWF9JTl9XRUIiLCJkYXRhIjp7InJlZGlzS2V5IjoiYnVnYm90OmVlMjNhMDcyLTIzM2ItNDQ0Ni1hYjdjLWNjMzU4MTU4MGQzYSIsImVuY3J5cHRpb25LZXkiOiJyNjVpMkhqaUZPdXcyY1RtY3B4RktKbUxvLWlMaF8wZms0WHpNNlFhZ1prIiwiYnJhbmNoIjoiZHJldy9vYXV0aC1ibHVlcHJpbnQtYXV0aCIsInJlcG9Pd25lciI6InRhbmdsZS1uZXR3b3JrIiwicmVwb05hbWUiOiJibHVlcHJpbnQiLCJwck51bWJlciI6MTE0MCwiY29tbWl0U2hhIjoiN2FkMzc0Nzg0OTU4NjRmMTk2ZDY3YzRjZWFkMDVhZmRiNTA4OTk4ZiJ9LCJpYXQiOjE3NTY4OTkxMjEsImV4cCI6MTc1NzUwMzkyMX0.NRQHKqrA9cdtpDn_F-EwODbjJ-LynZTj3DyGkT_T3VefQLaxzI_gfFOP42IyrODyRcotFBdV-hUflgd6pck7X4qx6d8BiMFTMCGUbZdS9VqlODbTZHNtR2U50WdVLESI_oRZ8RGgo9-zX5RX2E93VR1N3vftY-7dQbVXMEIt9_oFI-50-bjz0r_PgCyd1kyAJ4XArv0obtyX0eXtfzp0HgmIaJo0rubzii1PyZnhGuKEP3eAiBeMHpHjt-zaP6hzLrq-lMBVbg93WMyAYwJpQ3ZM5YpwqhWAduYdh4YJk81oraPCDZLROkMNB-kX1caKOaqZGV8u1lreIh3nCq2K-A\"><picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://cursor.com/fix-in-web-dark.svg\"><source media=\"(prefers-color-scheme: light)\" srcset=\"https://cursor.com/fix-in-web-light.svg\"><img alt=\"Fix in Web\" src=\"https://cursor.com/fix-in-web.svg\"></picture></a>\n\n","created_at":"2025-09-03T11:32:02Z","updated_at":"2025-09-03T11:32:02Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2318679139","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"NONE","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2318679139"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2318679139"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2318679139/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":19,"original_line":37,"side":"RIGHT","original_position":37,"position":19,"subject_type":"line"},{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2351810596","pull_request_review_id":3228937634,"id":2351810596,"node_id":"PRRC_kwDOKimTEs6MLcgk","diff_hunk":"@@ -697,6 +724,24 @@ async fn reverse_proxy(\n     *req.uri_mut() = target_uri;\n \n     // Inject additional headers into the request with re-validation\n+    // Sanitize inbound headers: drop Authorization and any tenant/scope headers supplied by client\n+    {\n+        let mut to_remove: Vec<header::HeaderName> = Vec::new();\n+        for (name, _value) in req.headers().iter() {\n+            let lower = name.as_str().to_ascii_lowercase();\n+            if lower == \"authorization\"\n+                || lower.starts_with(\"x-tenant-\")\n+                || lower == \"x-scope\"\n+                || lower == \"x-scopes\"\n+            {\n+                to_remove.push(name.clone());\n+            }\n+        }\n+        for name in to_remove {\n+            req.headers_mut().remove(name);\n+        }\n+    }","path":"crates/auth/src/proxy.rs","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"shekohex","id":14620076,"node_id":"MDQ6VXNlcjE0NjIwMDc2","avatar_url":"https://avatars.githubusercontent.com/u/14620076?v=4","gravatar_id":"","url":"https://api.github.com/users/shekohex","html_url":"https://github.com/shekohex","followers_url":"https://api.github.com/users/shekohex/followers","following_url":"https://api.github.com/users/shekohex/following{/other_user}","gists_url":"https://api.github.com/users/shekohex/gists{/gist_id}","starred_url":"https://api.github.com/users/shekohex/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shekohex/subscriptions","organizations_url":"https://api.github.com/users/shekohex/orgs","repos_url":"https://api.github.com/users/shekohex/repos","events_url":"https://api.github.com/users/shekohex/events{/privacy}","received_events_url":"https://api.github.com/users/shekohex/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"should be using is_forbidden_header","created_at":"2025-09-16T10:10:48Z","updated_at":"2025-09-16T10:22:51Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2351810596","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"MEMBER","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2351810596"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2351810596"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2351810596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":728,"start_side":"RIGHT","line":null,"original_line":743,"side":"RIGHT","original_position":78,"position":1,"subject_type":"line"},{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2351820653","pull_request_review_id":3228937634,"id":2351820653,"node_id":"PRRC_kwDOKimTEs6MLe9t","diff_hunk":"@@ -0,0 +1,57 @@\n+use std::collections::HashSet;\n+\n+/// Lightweight auth context derived from canonical headers set by the proxy\n+#[derive(Clone, Debug, Default)]\n+pub struct AuthContext {\n+    pub tenant_hash: Option<String>,\n+    pub scopes: HashSet<String>,\n+}\n+\n+impl AuthContext {\n+    pub fn from_headers(headers: &axum::http::HeaderMap) -> Self {","path":"crates/auth/src/request_auth.rs","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"shekohex","id":14620076,"node_id":"MDQ6VXNlcjE0NjIwMDc2","avatar_url":"https://avatars.githubusercontent.com/u/14620076?v=4","gravatar_id":"","url":"https://api.github.com/users/shekohex","html_url":"https://github.com/shekohex","followers_url":"https://api.github.com/users/shekohex/followers","following_url":"https://api.github.com/users/shekohex/following{/other_user}","gists_url":"https://api.github.com/users/shekohex/gists{/gist_id}","starred_url":"https://api.github.com/users/shekohex/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shekohex/subscriptions","organizations_url":"https://api.github.com/users/shekohex/orgs","repos_url":"https://api.github.com/users/shekohex/repos","events_url":"https://api.github.com/users/shekohex/events{/privacy}","received_events_url":"https://api.github.com/users/shekohex/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"this can be simplified to be just a HashMap or a BTreeMap to make downstream users not requering axum.","created_at":"2025-09-16T10:13:09Z","updated_at":"2025-09-16T10:22:51Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2351820653","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"MEMBER","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2351820653"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2351820653"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2351820653/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":null,"original_line":11,"side":"RIGHT","original_position":11,"position":1,"subject_type":"line"},{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2351846034","pull_request_review_id":3228937634,"id":2351846034,"node_id":"PRRC_kwDOKimTEs6MLlKS","diff_hunk":"@@ -0,0 +1,242 @@\n+use blueprint_sdk::extract::Context;\n+use blueprint_sdk::runner::BackgroundService;\n+use blueprint_sdk::runner::error::RunnerError;\n+use blueprint_sdk::tangle::extract::{TangleArg, TangleResult};\n+use blueprint_sdk::contexts::tangle::TangleClient;\n+use blueprint_sdk::macros::debug_job;\n+use tokio::sync::oneshot;\n+use tokio::sync::oneshot::Receiver;\n+use axum::{\n+    routing::{get, post},\n+    Json, Router,\n+    http::StatusCode,\n+    response::IntoResponse,\n+    extract::Path,\n+    middleware,\n+};\n+use axum::http::{Request, HeaderMap};\n+use axum::body::Body;\n+use std::collections::HashMap;\n+use std::sync::{Arc, OnceLock};\n+use tokio::sync::RwLock;\n+\n+pub const WRITE_RESOURCE_JOB_ID: u32 = 0;\n+pub const PURCHASE_API_KEY_JOB_ID: u32 = 1;\n+\n+#[derive(Clone)]\n+pub struct ApiKeyBlueprintContext {\n+    pub tangle_client: Arc<TangleClient>,\n+}\n+\n+// ===== Tangle Jobs (NO AUTH - just blockchain events) =====\n+\n+#[debug_job]\n+pub async fn write_resource(\n+    Context(_ctx): Context<ApiKeyBlueprintContext>,\n+    TangleArg((resource_id, data, account)): TangleArg<(String, String, String)>,\n+) -> TangleResult<serde_json::Value> {\n+    // This is triggered by blockchain tx - no auth needed\n+    // The account comes from the transaction data\n+    \n+    let store = resource_store();\n+    let mut guard = store.write().await;\n+    let entry = guard.entry(account.clone()).or_default();\n+    entry.insert(resource_id.clone(), data.clone());\n+    \n+    TangleResult(serde_json::json!({\n+        \"ok\": true,\n+        \"resource_id\": resource_id,\n+        \"account\": account,\n+    }))\n+}\n+\n+#[debug_job]\n+pub async fn purchase_api_key(\n+    Context(_ctx): Context<ApiKeyBlueprintContext>,\n+    TangleArg((tier, account)): TangleArg<(String, String)>,\n+) -> TangleResult<serde_json::Value> {\n+    // Generate API key for the blockchain account\n+    let api_key = format!(\"sk_{}_{}\", tier, uuid::Uuid::new_v4());\n+    \n+    use sha2::{Sha256, Digest};\n+    let mut hasher = Sha256::new();\n+    hasher.update(api_key.as_bytes());\n+    let api_key_hash = format!(\"{:x}\", hasher.finalize());\n+    \n+    let store = api_key_store();\n+    let mut guard = store.write().await;\n+    guard.insert(api_key_hash.clone(), serde_json::json!({\n+        \"tier\": tier,\n+        \"account\": account,\n+        \"active\": true,\n+    }));\n+    \n+    TangleResult(serde_json::json!({\n+        \"ok\": true,\n+        \"api_key_hash\": api_key_hash,\n+        \"api_key\": api_key, // In prod, encrypt this","path":"examples/apikey-blueprint/apikey-blueprint-lib/src/lib.rs","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"shekohex","id":14620076,"node_id":"MDQ6VXNlcjE0NjIwMDc2","avatar_url":"https://avatars.githubusercontent.com/u/14620076?v=4","gravatar_id":"","url":"https://api.github.com/users/shekohex","html_url":"https://github.com/shekohex","followers_url":"https://api.github.com/users/shekohex/followers","following_url":"https://api.github.com/users/shekohex/following{/other_user}","gists_url":"https://api.github.com/users/shekohex/gists{/gist_id}","starred_url":"https://api.github.com/users/shekohex/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shekohex/subscriptions","organizations_url":"https://api.github.com/users/shekohex/orgs","repos_url":"https://api.github.com/users/shekohex/repos","events_url":"https://api.github.com/users/shekohex/events{/privacy}","received_events_url":"https://api.github.com/users/shekohex/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"IMO, this a bad example, API Keys should never be posted on-chain, there must be a secure channel for communication with the author","created_at":"2025-09-16T10:19:42Z","updated_at":"2025-09-16T10:22:51Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2351846034","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"MEMBER","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2351846034"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2351846034"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2351846034/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":null,"original_line":77,"side":"RIGHT","original_position":77,"position":1,"subject_type":"line"},{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2352979862","pull_request_review_id":3230697411,"id":2352979862,"node_id":"PRRC_kwDOKimTEs6MP5-W","diff_hunk":"@@ -0,0 +1,242 @@\n+use blueprint_sdk::extract::Context;\n+use blueprint_sdk::runner::BackgroundService;\n+use blueprint_sdk::runner::error::RunnerError;\n+use blueprint_sdk::tangle::extract::{TangleArg, TangleResult};\n+use blueprint_sdk::contexts::tangle::TangleClient;\n+use blueprint_sdk::macros::debug_job;\n+use tokio::sync::oneshot;\n+use tokio::sync::oneshot::Receiver;\n+use axum::{\n+    routing::{get, post},\n+    Json, Router,\n+    http::StatusCode,\n+    response::IntoResponse,\n+    extract::Path,\n+    middleware,\n+};\n+use axum::http::{Request, HeaderMap};\n+use axum::body::Body;\n+use std::collections::HashMap;\n+use std::sync::{Arc, OnceLock};\n+use tokio::sync::RwLock;\n+\n+pub const WRITE_RESOURCE_JOB_ID: u32 = 0;\n+pub const PURCHASE_API_KEY_JOB_ID: u32 = 1;\n+\n+#[derive(Clone)]\n+pub struct ApiKeyBlueprintContext {\n+    pub tangle_client: Arc<TangleClient>,\n+}\n+\n+// ===== Tangle Jobs (NO AUTH - just blockchain events) =====\n+\n+#[debug_job]\n+pub async fn write_resource(\n+    Context(_ctx): Context<ApiKeyBlueprintContext>,\n+    TangleArg((resource_id, data, account)): TangleArg<(String, String, String)>,\n+) -> TangleResult<serde_json::Value> {\n+    // This is triggered by blockchain tx - no auth needed\n+    // The account comes from the transaction data\n+    \n+    let store = resource_store();\n+    let mut guard = store.write().await;\n+    let entry = guard.entry(account.clone()).or_default();\n+    entry.insert(resource_id.clone(), data.clone());\n+    \n+    TangleResult(serde_json::json!({\n+        \"ok\": true,\n+        \"resource_id\": resource_id,\n+        \"account\": account,\n+    }))\n+}\n+\n+#[debug_job]\n+pub async fn purchase_api_key(\n+    Context(_ctx): Context<ApiKeyBlueprintContext>,\n+    TangleArg((tier, account)): TangleArg<(String, String)>,\n+) -> TangleResult<serde_json::Value> {\n+    // Generate API key for the blockchain account\n+    let api_key = format!(\"sk_{}_{}\", tier, uuid::Uuid::new_v4());\n+    \n+    use sha2::{Sha256, Digest};\n+    let mut hasher = Sha256::new();\n+    hasher.update(api_key.as_bytes());\n+    let api_key_hash = format!(\"{:x}\", hasher.finalize());\n+    \n+    let store = api_key_store();\n+    let mut guard = store.write().await;\n+    guard.insert(api_key_hash.clone(), serde_json::json!({\n+        \"tier\": tier,\n+        \"account\": account,\n+        \"active\": true,\n+    }));\n+    \n+    TangleResult(serde_json::json!({\n+        \"ok\": true,\n+        \"api_key_hash\": api_key_hash,\n+        \"api_key\": api_key, // In prod, encrypt this","path":"examples/apikey-blueprint/apikey-blueprint-lib/src/lib.rs","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"drewstone","id":13153687,"node_id":"MDQ6VXNlcjEzMTUzNjg3","avatar_url":"https://avatars.githubusercontent.com/u/13153687?v=4","gravatar_id":"","url":"https://api.github.com/users/drewstone","html_url":"https://github.com/drewstone","followers_url":"https://api.github.com/users/drewstone/followers","following_url":"https://api.github.com/users/drewstone/following{/other_user}","gists_url":"https://api.github.com/users/drewstone/gists{/gist_id}","starred_url":"https://api.github.com/users/drewstone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drewstone/subscriptions","organizations_url":"https://api.github.com/users/drewstone/orgs","repos_url":"https://api.github.com/users/drewstone/repos","events_url":"https://api.github.com/users/drewstone/events{/privacy}","received_events_url":"https://api.github.com/users/drewstone/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"How would this be provided by design? WebRTC? Ideally not something the blueprint developer needs to deal with right as in exported from our SDK or at least 1 ideal version is exported with them being able to customize things otherwise (i.e. do encryption onchain).","created_at":"2025-09-16T16:01:39Z","updated_at":"2025-09-16T16:02:04Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2352979862","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"MEMBER","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2352979862"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2352979862"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2352979862/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":null,"original_line":77,"side":"RIGHT","in_reply_to_id":2351846034,"original_position":77,"position":1,"subject_type":"line"},{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354163779","pull_request_review_id":3232448052,"id":2354163779,"node_id":"PRRC_kwDOKimTEs6MUbBD","diff_hunk":"@@ -28,8 +28,10 @@ schnorrkel = { workspace = true }\n serde_json = { workspace = true }\n pasetors = { version = \"0.7.7\", default-features = false, features = [\"v4\", \"serde_json\", \"std\"] }\n uuid = { workspace = true, features = [\"v4\", \"serde\"] }\n+jsonwebtoken = { version = \"9\", default-features = false }","path":"crates/auth/Cargo.toml","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"Tjemmmic","id":37707055,"node_id":"MDQ6VXNlcjM3NzA3MDU1","avatar_url":"https://avatars.githubusercontent.com/u/37707055?v=4","gravatar_id":"","url":"https://api.github.com/users/Tjemmmic","html_url":"https://github.com/Tjemmmic","followers_url":"https://api.github.com/users/Tjemmmic/followers","following_url":"https://api.github.com/users/Tjemmmic/following{/other_user}","gists_url":"https://api.github.com/users/Tjemmmic/gists{/gist_id}","starred_url":"https://api.github.com/users/Tjemmmic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Tjemmmic/subscriptions","organizations_url":"https://api.github.com/users/Tjemmmic/orgs","repos_url":"https://api.github.com/users/Tjemmmic/repos","events_url":"https://api.github.com/users/Tjemmmic/events{/privacy}","received_events_url":"https://api.github.com/users/Tjemmmic/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"Should make these pull from the workspace deps for consistency","created_at":"2025-09-17T03:09:21Z","updated_at":"2025-09-17T03:30:18Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2354163779","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"MEMBER","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354163779"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2354163779"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354163779/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":32,"original_line":31,"side":"RIGHT","original_position":4,"position":4,"subject_type":"line"},{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354167961","pull_request_review_id":3232448052,"id":2354167961,"node_id":"PRRC_kwDOKimTEs6MUcCZ","diff_hunk":"@@ -0,0 +1,236 @@\n+use axum::{Json, extract::State, http::StatusCode, response::IntoResponse};\n+\n+/// OAuth 2.0 JWT Bearer Assertion token endpoint (RFC 7523)\n+/// Accepts application/x-www-form-urlencoded with:\n+/// - grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer\n+/// - assertion=<JWT>\n+pub async fn oauth_token(\n+    State(s): State<crate::proxy::AuthenticatedProxyState>,\n+    headers: axum::http::HeaderMap,\n+    axum::extract::Form(form): axum::extract::Form<std::collections::HashMap<String, String>>,\n+) -> impl IntoResponse {\n+    let no_store_headers = [\n+        (axum::http::header::CACHE_CONTROL, \"no-store\"),\n+        (axum::http::header::PRAGMA, \"no-cache\"),\n+    ];\n+    let grant_type = form.get(\"grant_type\").map(String::as_str);\n+    let assertion = form.get(\"assertion\").map(String::as_str);\n+\n+    if grant_type != Some(\"urn:ietf:params:oauth:grant-type:jwt-bearer\") {\n+        return (\n+            StatusCode::BAD_REQUEST,\n+            (\n+                no_store_headers,\n+                Json(serde_json::json!({\n+                    \"error\": \"unsupported_grant_type\",\n+                    \"error_description\": \"grant_type must be JWT bearer\"\n+                })),\n+            ),\n+        );\n+    }\n+\n+    let assertion = match assertion {\n+        Some(a) if !a.is_empty() => a,\n+        _ => {\n+            return (\n+                StatusCode::BAD_REQUEST,\n+                (\n+                    no_store_headers,\n+                    Json(serde_json::json!({\n+                        \"error\": \"invalid_request\",\n+                        \"error_description\": \"missing assertion\"\n+                    })),\n+                ),\n+            );\n+        }\n+    };\n+\n+    // Map to service_id via header for MVP (consistent with existing endpoints)\n+    let service_id = match headers\n+        .get(crate::types::headers::X_SERVICE_ID)\n+        .and_then(|h| h.to_str().ok())\n+        .and_then(|s| s.parse::<crate::types::ServiceId>().ok())\n+    {\n+        Some(id) => id,\n+        None => {\n+            return (\n+                StatusCode::PRECONDITION_REQUIRED,\n+                (\n+                    no_store_headers,\n+                    Json(serde_json::json!({\n+                        \"error\": \"invalid_request\",\n+                        \"error_description\": \"Missing X-Service-Id header\"\n+                    })),\n+                ),\n+            );\n+        }\n+    };\n+\n+    // Load per-service OAuth policy\n+    let policy = match crate::oauth::ServiceOAuthPolicy::load(service_id, s.db_ref()) {\n+        Ok(Some(p)) => p,\n+        Ok(None) => {\n+            return (\n+                StatusCode::BAD_REQUEST,\n+                (\n+                    no_store_headers,\n+                    Json(serde_json::json!({\n+                        \"error\": \"invalid_request\",\n+                        \"error_description\": \"OAuth not enabled for this service\"\n+                    })),\n+                ),\n+            );\n+        }\n+        Err(_) => {\n+            return (\n+                StatusCode::INTERNAL_SERVER_ERROR,\n+                (\n+                    no_store_headers,\n+                    Json(serde_json::json!({\n+                        \"error\": \"server_error\",\n+                        \"error_description\": \"Failed to load service policy\"\n+                    })),\n+                ),\n+            );\n+        }\n+    };\n+\n+    // Best-effort per-IP rate limiting: 120 requests/minute per service\n+    if let Some(limit_err) =\n+        crate::oauth::rate_limit_check(s.db_ref(), &headers, service_id, 60, 120).err()\n+    {\n+        tracing::debug!(\"rate_limit_check error: {}\", limit_err);","path":"crates/auth/src/oauth/token.rs","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"Tjemmmic","id":37707055,"node_id":"MDQ6VXNlcjM3NzA3MDU1","avatar_url":"https://avatars.githubusercontent.com/u/37707055?v=4","gravatar_id":"","url":"https://api.github.com/users/Tjemmmic","html_url":"https://github.com/Tjemmmic","followers_url":"https://api.github.com/users/Tjemmmic/followers","following_url":"https://api.github.com/users/Tjemmmic/following{/other_user}","gists_url":"https://api.github.com/users/Tjemmmic/gists{/gist_id}","starred_url":"https://api.github.com/users/Tjemmmic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Tjemmmic/subscriptions","organizations_url":"https://api.github.com/users/Tjemmmic/orgs","repos_url":"https://api.github.com/users/Tjemmmic/repos","events_url":"https://api.github.com/users/Tjemmmic/events{/privacy}","received_events_url":"https://api.github.com/users/Tjemmmic/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"Replace tracing usage with blueprint tracing macros","created_at":"2025-09-17T03:12:40Z","updated_at":"2025-09-17T03:30:18Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2354167961","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"MEMBER","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354167961"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2354167961"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354167961/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":102,"original_line":102,"side":"RIGHT","original_position":102,"position":102,"subject_type":"line"},{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354169675","pull_request_review_id":3232448052,"id":2354169675,"node_id":"PRRC_kwDOKimTEs6MUcdL","diff_hunk":"@@ -0,0 +1,236 @@\n+use axum::{Json, extract::State, http::StatusCode, response::IntoResponse};\n+\n+/// OAuth 2.0 JWT Bearer Assertion token endpoint (RFC 7523)\n+/// Accepts application/x-www-form-urlencoded with:\n+/// - grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer\n+/// - assertion=<JWT>\n+pub async fn oauth_token(\n+    State(s): State<crate::proxy::AuthenticatedProxyState>,\n+    headers: axum::http::HeaderMap,\n+    axum::extract::Form(form): axum::extract::Form<std::collections::HashMap<String, String>>,\n+) -> impl IntoResponse {\n+    let no_store_headers = [\n+        (axum::http::header::CACHE_CONTROL, \"no-store\"),\n+        (axum::http::header::PRAGMA, \"no-cache\"),\n+    ];\n+    let grant_type = form.get(\"grant_type\").map(String::as_str);\n+    let assertion = form.get(\"assertion\").map(String::as_str);\n+\n+    if grant_type != Some(\"urn:ietf:params:oauth:grant-type:jwt-bearer\") {\n+        return (\n+            StatusCode::BAD_REQUEST,\n+            (\n+                no_store_headers,\n+                Json(serde_json::json!({\n+                    \"error\": \"unsupported_grant_type\",\n+                    \"error_description\": \"grant_type must be JWT bearer\"\n+                })),\n+            ),\n+        );\n+    }\n+\n+    let assertion = match assertion {\n+        Some(a) if !a.is_empty() => a,\n+        _ => {\n+            return (\n+                StatusCode::BAD_REQUEST,\n+                (\n+                    no_store_headers,\n+                    Json(serde_json::json!({\n+                        \"error\": \"invalid_request\",\n+                        \"error_description\": \"missing assertion\"\n+                    })),\n+                ),\n+            );\n+        }\n+    };\n+\n+    // Map to service_id via header for MVP (consistent with existing endpoints)\n+    let service_id = match headers\n+        .get(crate::types::headers::X_SERVICE_ID)\n+        .and_then(|h| h.to_str().ok())\n+        .and_then(|s| s.parse::<crate::types::ServiceId>().ok())\n+    {\n+        Some(id) => id,\n+        None => {\n+            return (\n+                StatusCode::PRECONDITION_REQUIRED,\n+                (\n+                    no_store_headers,\n+                    Json(serde_json::json!({\n+                        \"error\": \"invalid_request\",\n+                        \"error_description\": \"Missing X-Service-Id header\"\n+                    })),\n+                ),\n+            );\n+        }\n+    };\n+\n+    // Load per-service OAuth policy\n+    let policy = match crate::oauth::ServiceOAuthPolicy::load(service_id, s.db_ref()) {\n+        Ok(Some(p)) => p,\n+        Ok(None) => {\n+            return (\n+                StatusCode::BAD_REQUEST,\n+                (\n+                    no_store_headers,\n+                    Json(serde_json::json!({\n+                        \"error\": \"invalid_request\",\n+                        \"error_description\": \"OAuth not enabled for this service\"\n+                    })),\n+                ),\n+            );\n+        }\n+        Err(_) => {\n+            return (\n+                StatusCode::INTERNAL_SERVER_ERROR,\n+                (\n+                    no_store_headers,\n+                    Json(serde_json::json!({\n+                        \"error\": \"server_error\",\n+                        \"error_description\": \"Failed to load service policy\"\n+                    })),\n+                ),\n+            );\n+        }\n+    };\n+\n+    // Best-effort per-IP rate limiting: 120 requests/minute per service\n+    if let Some(limit_err) =\n+        crate::oauth::rate_limit_check(s.db_ref(), &headers, service_id, 60, 120).err()\n+    {\n+        tracing::debug!(\"rate_limit_check error: {}\", limit_err);\n+    }\n+\n+    // Verify assertion (placeholder implementation returns NotConfigured until wired)","path":"crates/auth/src/oauth/token.rs","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"Tjemmmic","id":37707055,"node_id":"MDQ6VXNlcjM3NzA3MDU1","avatar_url":"https://avatars.githubusercontent.com/u/37707055?v=4","gravatar_id":"","url":"https://api.github.com/users/Tjemmmic","html_url":"https://github.com/Tjemmmic","followers_url":"https://api.github.com/users/Tjemmmic/followers","following_url":"https://api.github.com/users/Tjemmmic/following{/other_user}","gists_url":"https://api.github.com/users/Tjemmmic/gists{/gist_id}","starred_url":"https://api.github.com/users/Tjemmmic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Tjemmmic/subscriptions","organizations_url":"https://api.github.com/users/Tjemmmic/orgs","repos_url":"https://api.github.com/users/Tjemmmic/repos","events_url":"https://api.github.com/users/Tjemmmic/events{/privacy}","received_events_url":"https://api.github.com/users/Tjemmmic/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"Comment suggests placeholder, but it is not apparent in the code - is this an old comment?","created_at":"2025-09-17T03:14:15Z","updated_at":"2025-09-17T03:30:18Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2354169675","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"MEMBER","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354169675"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2354169675"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354169675/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":105,"original_line":105,"side":"RIGHT","original_position":105,"position":105,"subject_type":"line"},{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354186918","pull_request_review_id":3232448052,"id":2354186918,"node_id":"PRRC_kwDOKimTEs6MUgqm","diff_hunk":"@@ -0,0 +1,242 @@\n+use blueprint_sdk::extract::Context;\n+use blueprint_sdk::runner::BackgroundService;\n+use blueprint_sdk::runner::error::RunnerError;\n+use blueprint_sdk::tangle::extract::{TangleArg, TangleResult};\n+use blueprint_sdk::contexts::tangle::TangleClient;\n+use blueprint_sdk::macros::debug_job;\n+use tokio::sync::oneshot;\n+use tokio::sync::oneshot::Receiver;\n+use axum::{\n+    routing::{get, post},\n+    Json, Router,\n+    http::StatusCode,\n+    response::IntoResponse,\n+    extract::Path,\n+    middleware,\n+};\n+use axum::http::{Request, HeaderMap};\n+use axum::body::Body;\n+use std::collections::HashMap;\n+use std::sync::{Arc, OnceLock};\n+use tokio::sync::RwLock;\n+\n+pub const WRITE_RESOURCE_JOB_ID: u32 = 0;\n+pub const PURCHASE_API_KEY_JOB_ID: u32 = 1;\n+\n+#[derive(Clone)]\n+pub struct ApiKeyBlueprintContext {\n+    pub tangle_client: Arc<TangleClient>,\n+}\n+\n+// ===== Tangle Jobs (NO AUTH - just blockchain events) =====\n+\n+#[debug_job]\n+pub async fn write_resource(\n+    Context(_ctx): Context<ApiKeyBlueprintContext>,\n+    TangleArg((resource_id, data, account)): TangleArg<(String, String, String)>,\n+) -> TangleResult<serde_json::Value> {\n+    // This is triggered by blockchain tx - no auth needed\n+    // The account comes from the transaction data\n+    \n+    let store = resource_store();\n+    let mut guard = store.write().await;\n+    let entry = guard.entry(account.clone()).or_default();\n+    entry.insert(resource_id.clone(), data.clone());\n+    \n+    TangleResult(serde_json::json!({\n+        \"ok\": true,\n+        \"resource_id\": resource_id,\n+        \"account\": account,\n+    }))\n+}\n+\n+#[debug_job]\n+pub async fn purchase_api_key(\n+    Context(_ctx): Context<ApiKeyBlueprintContext>,\n+    TangleArg((tier, account)): TangleArg<(String, String)>,\n+) -> TangleResult<serde_json::Value> {\n+    // Generate API key for the blockchain account\n+    let api_key = format!(\"sk_{}_{}\", tier, uuid::Uuid::new_v4());\n+    \n+    use sha2::{Sha256, Digest};\n+    let mut hasher = Sha256::new();\n+    hasher.update(api_key.as_bytes());\n+    let api_key_hash = format!(\"{:x}\", hasher.finalize());\n+    \n+    let store = api_key_store();\n+    let mut guard = store.write().await;\n+    guard.insert(api_key_hash.clone(), serde_json::json!({\n+        \"tier\": tier,\n+        \"account\": account,\n+        \"active\": true,\n+    }));\n+    \n+    TangleResult(serde_json::json!({\n+        \"ok\": true,\n+        \"api_key_hash\": api_key_hash,\n+        \"api_key\": api_key, // In prod, encrypt this\n+        \"tier\": tier,\n+    }))\n+}\n+\n+// ===== Off-chain API Service (WITH AUTH) =====\n+\n+#[derive(Clone)]\n+pub struct ApiKeyProtectedService;\n+\n+impl BackgroundService for ApiKeyProtectedService {\n+    async fn start(&self) -> Result<Receiver<Result<(), RunnerError>>, RunnerError> {\n+        let (tx, rx) = oneshot::channel();\n+        \n+        tokio::spawn(async move {\n+            let app = Router::new()\n+                .route(\"/health\", get(|| async { Json(\"ok\") }))\n+                .route(\"/api/resources\", post(create_resource))\n+                .route(\"/api/resources/:id\", get(get_resource))\n+                .layer(middleware::from_fn(api_auth));\n+            \n+            let listener = tokio::net::TcpListener::bind(\"127.0.0.1:8081\")\n+                .await\n+                .unwrap();\n+            \n+            let _ = tx.send(Ok(()));\n+            let _ = axum::serve(listener, app).await;\n+        });\n+        \n+        Ok(rx)\n+    }\n+}\n+\n+#[derive(Clone)]\n+struct ApiKeyAuth {\n+    account: String,\n+}\n+\n+async fn api_auth(\n+    headers: HeaderMap,\n+    mut req: Request<Body>,\n+    next: middleware::Next,\n+) -> Result<impl IntoResponse, StatusCode> {\n+    let api_key = headers\n+        .get(\"X-API-Key\")\n+        .and_then(|h| h.to_str().ok())\n+        .ok_or(StatusCode::UNAUTHORIZED)?;\n+    \n+    use sha2::{Sha256, Digest};\n+    let mut hasher = Sha256::new();\n+    hasher.update(api_key.as_bytes());\n+    let hash = format!(\"{:x}\", hasher.finalize());\n+    \n+    let store = api_key_store();\n+    let guard = store.read().await;\n+    let data = guard.get(&hash).ok_or(StatusCode::UNAUTHORIZED)?;\n+    \n+    let auth = ApiKeyAuth {\n+        account: data[\"account\"].as_str().unwrap_or(\"\").to_string(),\n+    };\n+    \n+    req.extensions_mut().insert(auth);\n+    Ok(next.run(req).await)\n+}\n+\n+async fn create_resource(\n+    axum::Extension(auth): axum::Extension<ApiKeyAuth>,\n+    Json(payload): Json<HashMap<String, String>>,\n+) -> impl IntoResponse {\n+    let id = uuid::Uuid::new_v4().to_string();\n+    let data = payload.get(\"data\").cloned().unwrap_or_default();\n+    \n+    let store = resource_store();\n+    let mut guard = store.write().await;\n+    let resources = guard.entry(auth.account.clone()).or_default();\n+    resources.insert(id.clone(), data);\n+    \n+    Json(serde_json::json!({\"id\": id, \"account\": auth.account}))\n+}\n+\n+async fn get_resource(\n+    axum::Extension(auth): axum::Extension<ApiKeyAuth>,\n+    Path(id): Path<String>,\n+) -> impl IntoResponse {\n+    let store = resource_store();\n+    let guard = store.read().await;\n+    \n+    match guard.get(&auth.account).and_then(|r| r.get(&id)) {\n+        Some(data) => Json(serde_json::json!({\"id\": id, \"data\": data})),\n+        None => Json(serde_json::json!({\"error\": \"not found\"}))\n+    }\n+}\n+\n+// Storage\n+type ResourceMap = Arc<RwLock<HashMap<String, HashMap<String, String>>>>;\n+type ApiKeyMap = Arc<RwLock<HashMap<String, serde_json::Value>>>;\n+\n+fn resource_store() -> &'static ResourceMap {\n+    static STORE: OnceLock<ResourceMap> = OnceLock::new();\n+    STORE.get_or_init(|| Arc::new(RwLock::new(HashMap::new())))\n+}\n+\n+fn api_key_store() -> &'static ApiKeyMap {\n+    static STORE: OnceLock<ApiKeyMap> = OnceLock::new();\n+    STORE.get_or_init(|| Arc::new(RwLock::new(HashMap::new())))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[tokio::test]\n+    async fn test_purchase_api_key_job() {\n+        // Test the job directly - no auth needed\n+        let result = purchase_api_key(\n+            Context(ApiKeyBlueprintContext {\n+                tangle_client: Arc::new(TangleClient::default()),\n+            }),\n+            TangleArg((\"premium\".to_string(), \"0x123\".to_string())),\n+        ).await;\n+        \n+        assert_eq!(result.0[\"ok\"], true);\n+        assert_eq!(result.0[\"tier\"], \"premium\");\n+        assert!(result.0[\"api_key\"].as_str().unwrap().starts_with(\"sk_premium_\"));\n+    }\n+\n+    #[tokio::test]\n+    async fn test_write_resource_job() {\n+        let result = write_resource(\n+            Context(ApiKeyBlueprintContext {\n+                tangle_client: Arc::new(TangleClient::default()),\n+            }),\n+            TangleArg((\n+                \"resource_1\".to_string(),\n+                \"test data\".to_string(),\n+                \"0x456\".to_string(),\n+            )),\n+        ).await;\n+        \n+        assert_eq!(result.0[\"ok\"], true);\n+        assert_eq!(result.0[\"resource_id\"], \"resource_1\");\n+        assert_eq!(result.0[\"account\"], \"0x456\");\n+        \n+        // Verify it was stored\n+        let store = resource_store();\n+        let guard = store.read().await;\n+        assert_eq!(guard.get(\"0x456\").unwrap().get(\"resource_1\").unwrap(), \"test data\");\n+    }\n+\n+    #[tokio::test]\n+    async fn test_api_service_auth() {\n+        // First create an API key\n+        let _ = purchase_api_key(\n+            Context(ApiKeyBlueprintContext {\n+                tangle_client: Arc::new(TangleClient::default()),\n+            }),\n+            TangleArg((\"basic\".to_string(), \"test_account\".to_string())),\n+        ).await;\n+        \n+        // Now test that the API key works in the service\n+        // (In a real test, we'd make HTTP requests to the service)","path":"examples/apikey-blueprint/apikey-blueprint-lib/src/lib.rs","commit_id":"152fe98d47a581f7b932ed7475673fca253d0045","original_commit_id":"7ad37478495864f196d67c4cead05afdb508998f","user":{"login":"Tjemmmic","id":37707055,"node_id":"MDQ6VXNlcjM3NzA3MDU1","avatar_url":"https://avatars.githubusercontent.com/u/37707055?v=4","gravatar_id":"","url":"https://api.github.com/users/Tjemmmic","html_url":"https://github.com/Tjemmmic","followers_url":"https://api.github.com/users/Tjemmmic/followers","following_url":"https://api.github.com/users/Tjemmmic/following{/other_user}","gists_url":"https://api.github.com/users/Tjemmmic/gists{/gist_id}","starred_url":"https://api.github.com/users/Tjemmmic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Tjemmmic/subscriptions","organizations_url":"https://api.github.com/users/Tjemmmic/orgs","repos_url":"https://api.github.com/users/Tjemmmic/repos","events_url":"https://api.github.com/users/Tjemmmic/events{/privacy}","received_events_url":"https://api.github.com/users/Tjemmmic/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"Is there a reason there isn't a test that does this? Though, these tests aren't even being run at all are they?","created_at":"2025-09-17T03:25:06Z","updated_at":"2025-09-17T03:30:18Z","html_url":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2354186918","pull_request_url":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140","author_association":"MEMBER","_links":{"self":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354186918"},"html":{"href":"https://github.com/tangle-network/blueprint/pull/1140#discussion_r2354186918"},"pull_request":{"href":"https://api.github.com/repos/tangle-network/blueprint/pulls/1140"}},"reactions":{"url":"https://api.github.com/repos/tangle-network/blueprint/pulls/comments/2354186918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":236,"original_line":237,"side":"RIGHT","original_position":237,"position":236,"subject_type":"line"}]