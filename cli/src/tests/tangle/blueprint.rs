use std::fs;
use std::path::{Path, PathBuf};
use tempfile::TempDir;

/// Creates a temporary directory with the incredible-squaring blueprint
///
/// This function creates a temporary directory and populates it with the files needed
/// for the incredible-squaring blueprint. It returns the temporary directory and the path
/// to the blueprint directory.
pub fn create_test_blueprint() -> (TempDir, PathBuf) {
    let temp_dir = TempDir::new().expect("Failed to create temporary directory");
    let blueprint_dir = temp_dir.path().join("incredible-squaring");

    let current_dir = std::env::current_dir().expect("Failed to get current directory");
    let crates_dir = current_dir
        .parent()
        .expect("Failed to go back one directory");

    // Create directory structure
    fs::create_dir(&blueprint_dir).expect("Failed to create blueprint directory");
    fs::create_dir(blueprint_dir.join("src")).expect("Failed to create src directory");

    // Create contracts directory and subdirectories
    fs::create_dir(blueprint_dir.join("contracts")).expect("Failed to create contracts directory");
    fs::create_dir_all(
        blueprint_dir
            .join("contracts")
            .join("out")
            .join("IncredibleSquaringBlueprint.sol"),
    )
    .expect("Failed to create contract output directories");

    // Create a mock contract JSON file
    fs::write(
        blueprint_dir.join("contracts").join("out").join("IncredibleSquaringBlueprint.sol").join("IncredibleSquaringBlueprint.json"),
        r#"{"abi":[{"type":"function","name":"ROOT_CHAIN","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"blueprintOwner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"currentBlueprintId","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"masterBlueprintServiceManager","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"masterBlueprintServiceManagerAddress","inputs":[],"outputs":[{"name":"mbsm","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"onApprove","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"priceTargets","type":"tuple","internalType":"struct ServiceOperators.PriceTargets","components":[{"name":"cpu","type":"uint64","internalType":"uint64"},{"name":"mem","type":"uint64","internalType":"uint64"},{"name":"storage_hdd","type":"uint64","internalType":"uint64"},{"name":"storage_ssd","type":"uint64","internalType":"uint64"},{"name":"storage_nvme","type":"uint64","internalType":"uint64"}]}]},{"name":"requestId","type":"uint64","internalType":"uint64"},{"name":"restakingPercent","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onBlueprintCreated","inputs":[{"name":"blueprintId","type":"uint64","internalType":"uint64"},{"name":"owner","type":"address","internalType":"address"},{"name":"mbsm","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onJobCall","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"job","type":"uint8","internalType":"uint8"},{"name":"jobCallId","type":"uint64","internalType":"uint64"},{"name":"inputs","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onJobResult","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"job","type":"uint8","internalType":"uint8"},{"name":"jobCallId","type":"uint64","internalType":"uint64"},{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"priceTargets","type":"tuple","internalType":"struct ServiceOperators.PriceTargets","components":[{"name":"cpu","type":"uint64","internalType":"uint64"},{"name":"mem","type":"uint64","internalType":"uint64"},{"name":"storage_hdd","type":"uint64","internalType":"uint64"},{"name":"storage_ssd","type":"uint64","internalType":"uint64"},{"name":"storage_nvme","type":"uint64","internalType":"uint64"}]}]},{"name":"inputs","type":"bytes","internalType":"bytes"},{"name":"outputs","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onRegister","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"priceTargets","type":"tuple","internalType":"struct ServiceOperators.PriceTargets","components":[{"name":"cpu","type":"uint64","internalType":"uint64"},{"name":"mem","type":"uint64","internalType":"uint64"},{"name":"storage_hdd","type":"uint64","internalType":"uint64"},{"name":"storage_ssd","type":"uint64","internalType":"uint64"},{"name":"storage_nvme","type":"uint64","internalType":"uint64"}]}]},{"name":"registrationInputs","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onReject","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"priceTargets","type":"tuple","internalType":"struct ServiceOperators.PriceTargets","components":[{"name":"cpu","type":"uint64","internalType":"uint64"},{"name":"mem","type":"uint64","internalType":"uint64"},{"name":"storage_hdd","type":"uint64","internalType":"uint64"},{"name":"storage_ssd","type":"uint64","internalType":"uint64"},{"name":"storage_nvme","type":"uint64","internalType":"uint64"}]}]},{"name":"requestId","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onRequest","inputs":[{"name":"params","type":"tuple","internalType":"struct ServiceOperators.RequestParams","components":[{"name":"requestId","type":"uint64","internalType":"uint64"},{"name":"requester","type":"address","internalType":"address"},{"name":"operators","type":"tuple[]","internalType":"struct ServiceOperators.OperatorPreferences[]","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"priceTargets","type":"tuple","internalType":"struct ServiceOperators.PriceTargets","components":[{"name":"cpu","type":"uint64","internalType":"uint64"},{"name":"mem","type":"uint64","internalType":"uint64"},{"name":"storage_hdd","type":"uint64","internalType":"uint64"},{"name":"storage_ssd","type":"uint64","internalType":"uint64"},{"name":"storage_nvme","type":"uint64","internalType":"uint64"}]}]},{"name":"requestInputs","type":"bytes","internalType":"bytes"},{"name":"permittedCallers","type":"address[]","internalType":"address[]"},{"name":"ttl","type":"uint64","internalType":"uint64"},{"name":"paymentAsset","type":"tuple","internalType":"struct ServiceOperators.Asset","components":[{"name":"kind","type":"uint8","internalType":"enum ServiceOperators.AssetKind"},{"name":"data","type":"bytes32","internalType":"bytes32"}]},{"name":"amount","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onServiceInitialized","inputs":[{"name":"requestId","type":"uint64","internalType":"uint64"},{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"owner","type":"address","internalType":"address"},{"name":"permittedCallers","type":"address[]","internalType":"address[]"},{"name":"ttl","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onServiceTermination","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"owner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onSlash","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"offender","type":"bytes","internalType":"bytes"},{"name":"slashPercent","type":"uint8","internalType":"uint8"},{"name":"totalPayout","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onUnappliedSlash","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"offender","type":"bytes","internalType":"bytes"},{"name":"slashPercent","type":"uint8","internalType":"uint8"},{"name":"totalPayout","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onUnregister","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"priceTargets","type":"tuple","internalType":"struct ServiceOperators.PriceTargets","components":[{"name":"cpu","type":"uint64","internalType":"uint64"},{"name":"mem","type":"uint64","internalType":"uint64"},{"name":"storage_hdd","type":"uint64","internalType":"uint64"},{"name":"storage_ssd","type":"uint64","internalType":"uint64"},{"name":"storage_nvme","type":"uint64","internalType":"uint64"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onUpdatePriceTargets","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"priceTargets","type":"tuple","internalType":"struct ServiceOperators.PriceTargets","components":[{"name":"cpu","type":"uint64","internalType":"uint64"},{"name":"mem","type":"uint64","internalType":"uint64"},{"name":"storage_hdd","type":"uint64","internalType":"uint64"},{"name":"storage_ssd","type":"uint64","internalType":"uint64"},{"name":"storage_nvme","type":"uint64","internalType":"uint64"}]}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"operators","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"queryDeveloperPaymentAddress","inputs":[{"name":"","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"developerPaymentAddress","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"queryDisputeOrigin","inputs":[{"name":"","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"disputeOrigin","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"querySlashingOrigin","inputs":[{"name":"","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"slashingOrigin","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"rootChain","inputs":[],"outputs":[{"name":"rootChainAddress","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"function","name":"serviceInstances","inputs":[{"name":"","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"error","name":"OnlyMasterBlueprintServiceManagerAllowed","inputs":[{"name":"caller","type":"address","internalType":"address"},{"name":"masterBlueprintServiceManager","type":"address","internalType":"address"}]},{"type":"error","name":"OnlyRootChainAllowed","inputs":[{"name":"caller","type":"address","internalType":"address"},{"name":"rootChain","type":"address","internalType":"address"}]}],"bytecode":{"object":"","sourceMap":"424:2568:0:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60806040526004361061014b5760003560e01c8063884673ac116100b6578063a4d91fe91161006f578063a4d91fe91461038d578063bb43abd9146103ab578063d7deb482146103b9578063e926cbd114610198578063f8407662146103d9578063fe0dd371146103f957600080fd5b8063884673ac146102f45780638b2480651461031c5780639838caa31461032a578063987ab9db146103385780639d0410ee1461035f578063a24e8a901461037257600080fd5b806337c296621161010857806337c29662146102475780633e5718351461025a578063434698bb146102905780635d79ea29146102b057806374ceeb5514610227578063821c7be2146102d457600080fd5b806308179f35146101505780630af7d743146101985780630b6535d7146101ba5780630d0dd399146101da57806313e7c9d8146101fa57806314b4df4c14610227575b600080fd5b34801561015c57600080fd5b5061017b61016b3660046107f8565b506002546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a457600080fd5b506101b86101b3366004610873565b610407565b005b3480156101c657600080fd5b506101b86101d53660046108f6565b610453565b3480156101e657600080fd5b5060005461017b906001600160a01b031681565b34801561020657600080fd5b5061021a610215366004610939565b6104e0565b60405161018f9190610954565b34801561023357600080fd5b5061017b6102423660046107f8565b503090565b6101b86102553660046109ba565b61057a565b34801561026657600080fd5b5061017b6102753660046107f8565b6004602052600090815260409020546001600160a01b031681565b34801561029c57600080fd5b506101b86102ab366004610a7f565b610647565b3480156102bc57600080fd5b506102c660015481565b60405190815260200161018f565b3480156102e057600080fd5b506101b86102ef366004610abb565b61068a565b34801561030057600080fd5b5061017b73111111111111111111111111111111111111111181565b6101b86102ab366004610b08565b6101b86101b3366004610b43565b34801561034457600080fd5b5073111111111111111111111111111111111111111161017b565b6101b861036d366004610bb8565b6106ce565b34801561037e57600080fd5b506101b86102ef366004610c20565b34801561039957600080fd5b506000546001600160a01b031661017b565b6101b861036d366004610c4a565b3480156103c557600080fd5b506101b86103d4366004610c9e565b610713565b3480156103e557600080fd5b5060025461017b906001600160a01b031681565b6101b86102ab366004610a7f565b6000546001600160a01b0316331461044c57600054604051630c423fcf60e01b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b5050505050565b33731111111111111111111111111111111111111111146104a3576040516359afe8af60e11b81523360048201527311111111111111111111111111111111111111116024820152604401610443565b6001600160401b0392909216600155600280546001600160a01b039283166001600160a01b03199182161790915560008054929093169116179055565b600360205260009081526040902080546104f990610d54565b80601f016020809104026020016040519081016040528092919081815260200182805461052590610d54565b80156105725780601f1061054757610100808354040283529160200191610572565b820191906000526020600020905b81548152906001019060200180831161055557829003601f168201915b505050505081565b6000546001600160a01b031633146105ba57600054604051630c423fcf60e01b81523360048201526001600160a01b039091166024820152604401610443565b856001600160401b031660000361063d5760006105d984860186610d88565b905060006105e983850185610d88565b905060006105f78380610da1565b82149050806106395760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c995cdd5b1d60921b6044820152606401610443565b5050505b5050505050505050565b6000546001600160a01b0316331461068757600054604051630c423fcf60e01b81523360048201526001600160a01b039091166024820152604401610443565b50565b6000546001600160a01b031633146106ca57600054604051630c423fcf60e01b81523360048201526001600160a01b039091166024820152604401610443565b5050565b6000546001600160a01b0316331461070e57600054604051630c423fcf60e01b81523360048201526001600160a01b039091166024820152604401610443565b505050565b6000546001600160a01b0316331461075357600054604051630c423fcf60e01b81523360048201526001600160a01b039091166024820152604401610443565b600085604051610762906107cf565b6001600160401b039091168152602001604051809103906000f08015801561078e573d6000803e3d6000fd5b506001600160401b0396909616600090815260046020526040902080546001600160a01b0319166001600160a01b0390971696909617909555505050505050565b61018380610dcd83390190565b80356001600160401b03811681146107f357600080fd5b919050565b60006020828403121561080a57600080fd5b610813826107dc565b9392505050565b60008083601f84011261082c57600080fd5b5081356001600160401b0381111561084357600080fd5b60208301915083602082850101111561085b57600080fd5b9250929050565b803560ff811681146107f357600080fd5b60008060008060006080868803121561088b57600080fd5b610894866107dc565b945060208601356001600160401b038111156108af57600080fd5b6108bb8882890161081a565b90955093506108ce905060408701610862565b949793965091946060013592915050565b80356001600160a01b03811681146107f357600080fd5b60008060006060848603121561090b57600080fd5b610914846107dc565b9250610922602085016108df565b9150610930604085016108df565b90509250925092565b60006020828403121561094b57600080fd5b610813826108df565b600060208083528351808285015260005b8181101561098157858101830151858201604001528201610965565b506000604082860101526040601f19601f8301168501019250505092915050565b600060c082840312156109b457600080fd5b50919050565b60008060008060008060008060c0898b0312156109d657600080fd5b6109df896107dc565b97506109ed60208a01610862565b96506109fb60408a016107dc565b955060608901356001600160401b0380821115610a1757600080fd5b610a238c838d016109a2565b965060808b0135915080821115610a3957600080fd5b610a458c838d0161081a565b909650945060a08b0135915080821115610a5e57600080fd5b50610a6b8b828c0161081a565b999c989b5096995094979396929594505050565b600060208284031215610a9157600080fd5b81356001600160401b03811115610aa757600080fd5b610ab3848285016109a2565b949350505050565b60008060408385031215610ace57600080fd5b82356001600160401b03811115610ae457600080fd5b610af0858286016109a2565b925050610aff602084016107dc565b90509250929050565b600060208284031215610b1a57600080fd5b81356001600160401b03811115610b3057600080fd5b8201610120818503121561081357600080fd5b600080600080600060808688031215610b5b57600080fd5b610b64866107dc565b9450610b7260208701610862565b9350610b80604087016107dc565b925060608601356001600160401b03811115610b9b57600080fd5b610ba78882890161081a565b969995985093965092949392505050565b600080600060408486031215610bcd57600080fd5b83356001600160401b0380821115610be457600080fd5b610bf0878388016109a2565b94506020860135915080821115610c0657600080fd5b50610c138682870161081a565b9497909650939450505050565b60008060408385031215610c3357600080fd5b610c3c836107dc565b9150610aff602084016108df565b600080600060608486031215610c5f57600080fd5b83356001600160401b03811115610c7557600080fd5b610c81868287016109a2565b935050610c90602085016107dc565b915061093060408501610862565b60008060008060008060a08789031215610cb757600080fd5b610cc0876107dc565b9550610cce602088016107dc565b9450610cdc604088016108df565b935060608701356001600160401b0380821115610cf857600080fd5b818901915089601f830112610d0c57600080fd5b813581811115610d1b57600080fd5b8a60208260051b8501011115610d3057600080fd5b602083019550809450505050610d48608088016107dc565b90509295509295509295565b600181811c90821680610d6857607f821691505b6020821081036109b457634e487b7160e01b600052602260045260246000fd5b600060208284031215610d9a57600080fd5b5035919050565b8082028115828204841417610dc657634e487b7160e01b600052601160045260246000fd5b9291505056fe60c060405234801561001057600080fd5b5060405161018338038061018383398101604081905261002f91610044565b336080526001600160401b031660a052610074565b60006020828403121561005657600080fd5b81516001600160401b038116811461006d57600080fd5b9392505050565b60805160a05160ee6100956000396000607e01526000603b015260ee6000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063c05efa15146037578063da20ec6a14607a575b600080fd5b605d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b60a07f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001607156fea264697066735822122072338f6259e3a9e35dd85aa7687d84a77a32d82bfdc5c92ff90f7913aa4d587864736f6c63430008140033a26469706673582212208f987dc27f69028be30d34fdec4d56dd5fe831600fed07381ad278c44017a8d464736f6c63430008140033","sourceMap":"424:2568:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4519:157:2;;;;;;;;;;-1:-1:-1;4519:157:2;;;;;:::i;:::-;-1:-1:-1;4654:14:2;;-1:-1:-1;;;;;4654:14:2;;4519:157;;;;-1:-1:-1;;;;;543:32:7;;;525:51;;513:2;498:18;4519:157:2;;;;;;;;3908:202;;;;;;;;;;-1:-1:-1;3908:202:2;;;;;:::i;:::-;;:::i;:::-;;996:239;;;;;;;;;;-1:-1:-1;996:239:2;;;;;:::i;:::-;;:::i;472:44:6:-;;;;;;;;;;-1:-1:-1;472:44:6;;;;-1:-1:-1;;;;;472:44:6;;;674:42:0;;;;;;;;;;-1:-1:-1;674:42:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4341:127:2:-;;;;;;;;;;-1:-1:-1;4341:127:2;;;;;:::i;:::-;-1:-1:-1;4456:4:2;;4341:127;2318:672:0;;;;;;:::i;:::-;;:::i;897:50::-;;;;;;;;;;-1:-1:-1;897:50:0;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;897:50:0;;;1549:113:2;;;;;;;;;;-1:-1:-1;1549:113:2;;;;;:::i;:::-;;:::i;820:33::-;;;;;;;;;;;;;;;;;;;4881:25:7;;;4869:2;4854:18;820:33:2;4735:177:7;2367::2;;;;;;;;;;-1:-1:-1;2367:177:2;;;;;:::i;:::-;;:::i;386:79:6:-;;;;;;;;;;;;423:42;386:79;;1929:110:2;;;;;;:::i;2885:206::-;;;;;;:::i;910:104:6:-;;;;;;;;;;-1:-1:-1;423:42:6;910:104;;1286:212:2;;;;;;:::i;:::-;;:::i;3497:98::-;;;;;;;;;;-1:-1:-1;3497:98:2;;;;;:::i;1155:138:6:-;;;;;;;;;;-1:-1:-1;1226:12:6;1257:29;-1:-1:-1;;;;;1257:29:6;1155:138;;2090:226:2;;;;;;:::i;1415:390:0:-;;;;;;;;;;-1:-1:-1;1415:390:0;;;;;:::i;:::-;;:::i;915:29:2:-;;;;;;;;;;-1:-1:-1;915:29:2;;;;-1:-1:-1;;;;;915:29:2;;;1713:165;;;;;;:::i;3908:202::-;1803:29:6;;-1:-1:-1;;;;;1803:29:6;1789:10;:43;1785:164;;1908:29;;1855:83;;-1:-1:-1;;;1855:83:6;;1896:10;1855:83;;;9004:34:7;-1:-1:-1;;;;;1908:29:6;;;9054:18:7;;;9047:43;8939:18;;1855:83:6;;;;;;;;1785:164;3908:202:2;;;;;:::o;996:239::-;1461:10:6;423:42;1461:24;1457:106;;1508:44;;-1:-1:-1;;;1508:44:6;;1529:10;1508:44;;;9004:34:7;423:42:6;9054:18:7;;;9047:43;8939:18;;1508:44:6;8792:304:7;1457:106:6;-1:-1:-1;;;;;1118:32:2;;;::::1;:18;:32:::0;1160:14:::1;:22:::0;;-1:-1:-1;;;;;1160:22:2;;::::1;-1:-1:-1::0;;;;;;1160:22:2;;::::1;;::::0;;;-1:-1:-1;1192:36:2;;;;;::::1;::::0;::::1;;::::0;;996:239::o;674:42:0:-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2318:672::-;1803:29:6;;-1:-1:-1;;;;;1803:29:6;1789:10;:43;1785:164;;1908:29;;1855:83;;-1:-1:-1;;;1855:83:6;;1896:10;1855:83;;;9004:34:7;-1:-1:-1;;;;;1908:29:6;;;9054:18:7;;;9047:43;8939:18;;1855:83:6;8792:304:7;1785:164:6;2630:9:0::1;-1:-1:-1::0;;;;;2630:14:0::1;2643:1;2630:14:::0;2626:358:::1;;2705:13;2721:29;::::0;;::::1;2732:6:::0;2721:29:::1;:::i;:::-;2705:45:::0;-1:-1:-1;2764:14:0::1;2781:30;::::0;;::::1;2792:7:::0;2781:30:::1;:::i;:::-;2764:47:::0;-1:-1:-1;2887:12:0::1;2912:13;2920:5:::0;;2912:13:::1;:::i;:::-;2902:6;:23;2887:38;;2947:7;2939:34;;;::::0;-1:-1:-1;;;2939:34:0;;10143:2:7;2939:34:0::1;::::0;::::1;10125:21:7::0;10182:2;10162:18;;;10155:30;-1:-1:-1;;;10201:18:7;;;10194:44;10255:18;;2939:34:0::1;9941:338:7::0;2939:34:0::1;2646:338;;;2626:358;2318:672:::0;;;;;;;;:::o;1549:113:2:-;1803:29:6;;-1:-1:-1;;;;;1803:29:6;1789:10;:43;1785:164;;1908:29;;1855:83;;-1:-1:-1;;;1855:83:6;;1896:10;1855:83;;;9004:34:7;-1:-1:-1;;;;;1908:29:6;;;9054:18:7;;;9047:43;8939:18;;1855:83:6;8792:304:7;1785:164:6;1549:113:2;:::o;2367:177::-;1803:29:6;;-1:-1:-1;;;;;1803:29:6;1789:10;:43;1785:164;;1908:29;;1855:83;;-1:-1:-1;;;1855:83:6;;1896:10;1855:83;;;9004:34:7;-1:-1:-1;;;;;1908:29:6;;;9054:18:7;;;9047:43;8939:18;;1855:83:6;8792:304:7;1785:164:6;2367:177:2;;:::o;1286:212::-;1803:29:6;;-1:-1:-1;;;;;1803:29:6;1789:10;:43;1785:164;;1908:29;;1855:83;;-1:-1:-1;;;1855:83:6;;1896:10;1855:83;;;9004:34:7;-1:-1:-1;;;;;1908:29:6;;;9054:18:7;;;9047:43;8939:18;;1855:83:6;8792:304:7;1785:164:6;1286:212:2;;;:::o;1415:390:0:-;1803:29:6;;-1:-1:-1;;;;;1803:29:6;1789:10;:43;1785:164;;1908:29;;1855:83;;-1:-1:-1;;;1855:83:6;;1896:10;1855:83;;;9004:34:7;-1:-1:-1;;;;;1908:29:6;;;9054:18:7;;;9047:43;8939:18;;1855:83:6;8792:304:7;1785:164:6;1662:35:0::1;1731:9;1700:41;;;;;:::i;:::-;-1:-1:-1::0;;;;;10446:31:7;;;10428:50;;10416:2;10401:18;1700:41:0::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;;;;;1751:27:0;;;::::1;;::::0;;;:16:::1;:27;::::0;;;;:47;;-1:-1:-1;;;;;;1751:47:0::1;-1:-1:-1::0;;;;;1751:47:0;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;;;;;;1415:390:0:o;-1:-1:-1:-;;;;;;;;:::o;14:171:7:-;81:20;;-1:-1:-1;;;;;130:30:7;;120:41;;110:69;;175:1;172;165:12;110:69;14:171;;;:::o;190:184::-;248:6;301:2;289:9;280:7;276:23;272:32;269:52;;;317:1;314;307:12;269:52;340:28;358:9;340:28;:::i;:::-;330:38;190:184;-1:-1:-1;;;190:184:7:o;587:347::-;638:8;648:6;702:3;695:4;687:6;683:17;679:27;669:55;;720:1;717;710:12;669:55;-1:-1:-1;743:20:7;;-1:-1:-1;;;;;775:30:7;;772:50;;;818:1;815;808:12;772:50;855:4;847:6;843:17;831:29;;907:3;900:4;891:6;883;879:19;875:30;872:39;869:59;;;924:1;921;914:12;869:59;587:347;;;;;:::o;939:156::-;1005:20;;1065:4;1054:16;;1044:27;;1034:55;;1085:1;1082;1075:12;1100:620;1194:6;1202;1210;1218;1226;1279:3;1267:9;1258:7;1254:23;1250:33;1247:53;;;1296:1;1293;1286:12;1247:53;1319:28;1337:9;1319:28;:::i;:::-;1309:38;;1398:2;1387:9;1383:18;1370:32;-1:-1:-1;;;;;1417:6:7;1414:30;1411:50;;;1457:1;1454;1447:12;1411:50;1496:58;1546:7;1537:6;1526:9;1522:22;1496:58;:::i;:::-;1573:8;;-1:-1:-1;1470:84:7;-1:-1:-1;1627:36:7;;-1:-1:-1;1659:2:7;1644:18;;1627:36;:::i;:::-;1100:620;;;;-1:-1:-1;1100:620:7;;1710:2;1695:18;1682:32;;1100:620;-1:-1:-1;;1100:620:7:o;1725:173::-;1793:20;;-1:-1:-1;;;;;1842:31:7;;1832:42;;1822:70;;1888:1;1885;1878:12;1903:332;1979:6;1987;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:28;2105:9;2087:28;:::i;:::-;2077:38;;2134;2168:2;2157:9;2153:18;2134:38;:::i;:::-;2124:48;;2191:38;2225:2;2214:9;2210:18;2191:38;:::i;:::-;2181:48;;1903:332;;;;;:::o;2240:186::-;2299:6;2352:2;2340:9;2331:7;2327:23;2323:32;2320:52;;;2368:1;2365;2358:12;2320:52;2391:29;2410:9;2391:29;:::i;2431:546::-;2541:4;2570:2;2599;2588:9;2581:21;2631:6;2625:13;2674:6;2669:2;2658:9;2654:18;2647:34;2699:1;2709:140;2723:6;2720:1;2717:13;2709:140;;;2818:14;;;2814:23;;2808:30;2784:17;;;2803:2;2780:26;2773:66;2738:10;;2709:140;;;2713:3;2898:1;2893:2;2884:6;2873:9;2869:22;2865:31;2858:42;2968:2;2961;2957:7;2952:2;2944:6;2940:15;2936:29;2925:9;2921:45;2917:54;2909:62;;;;2431:546;;;;:::o;2982:168::-;3054:5;3099:3;3090:6;3085:3;3081:16;3077:26;3074:46;;;3116:1;3113;3106:12;3074:46;-1:-1:-1;3138:6:7;2982:168;-1:-1:-1;2982:168:7:o;3155:1191::-;3315:6;3323;3331;3339;3347;3355;3363;3371;3424:3;3412:9;3403:7;3399:23;3395:33;3392:53;;;3441:1;3438;3431:12;3392:53;3464:28;3482:9;3464:28;:::i;:::-;3454:38;;3511:36;3543:2;3532:9;3528:18;3511:36;:::i;:::-;3501:46;;3566:37;3599:2;3588:9;3584:18;3566:37;:::i;:::-;3556:47;;3654:2;3643:9;3639:18;3626:32;-1:-1:-1;;;;;3718:2:7;3710:6;3707:14;3704:34;;;3734:1;3731;3724:12;3704:34;3757:79;3828:7;3819:6;3808:9;3804:22;3757:79;:::i;:::-;3747:89;;3889:3;3878:9;3874:19;3861:33;3845:49;;3919:2;3909:8;3906:16;3903:36;;;3935:1;3932;3925:12;3903:36;3974:60;4026:7;4015:8;4004:9;4000:24;3974:60;:::i;:::-;4053:8;;-1:-1:-1;3948:86:7;-1:-1:-1;4141:3:7;4126:19;;4113:33;;-1:-1:-1;4158:16:7;;;4155:36;;;4187:1;4184;4177:12;4155:36;;4226:60;4278:7;4267:8;4256:9;4252:24;4226:60;:::i;:::-;3155:1191;;;;-1:-1:-1;3155:1191:7;;-1:-1:-1;3155:1191:7;;;;;;4305:8;-1:-1:-1;;;3155:1191:7:o;4351:379::-;4448:6;4501:2;4489:9;4480:7;4476:23;4472:32;4469:52;;;4517:1;4514;4507:12;4469:52;4557:9;4544:23;-1:-1:-1;;;;;4582:6:7;4579:30;4576:50;;;4622:1;4619;4612:12;4576:50;4645:79;4716:7;4707:6;4696:9;4692:22;4645:79;:::i;:::-;4635:89;4351:379;-1:-1:-1;;;;4351:379:7:o;4917:451::-;5022:6;5030;5083:2;5071:9;5062:7;5058:23;5054:32;5051:52;;;5099:1;5096;5089:12;5051:52;5139:9;5126:23;-1:-1:-1;;;;;5164:6:7;5161:30;5158:50;;;5204:1;5201;5194:12;5158:50;5227:79;5298:7;5289:6;5278:9;5274:22;5227:79;:::i;:::-;5217:89;;;5325:37;5358:2;5347:9;5343:18;5325:37;:::i;:::-;5315:47;;4917:451;;;;;:::o;5373:392::-;5464:6;5517:2;5505:9;5496:7;5492:23;5488:32;5485:52;;;5533:1;5530;5523:12;5485:52;5573:9;5560:23;-1:-1:-1;;;;;5598:6:7;5595:30;5592:50;;;5638:1;5635;5628:12;5592:50;5661:22;;5717:3;5699:16;;;5695:26;5692:46;;;5734:1;5731;5724:12;5770:624;5863:6;5871;5879;5887;5895;5948:3;5936:9;5927:7;5923:23;5919:33;5916:53;;;5965:1;5962;5955:12;5916:53;5988:28;6006:9;5988:28;:::i;:::-;5978:38;;6035:36;6067:2;6056:9;6052:18;6035:36;:::i;:::-;6025:46;;6090:37;6123:2;6112:9;6108:18;6090:37;:::i;:::-;6080:47;;6178:2;6167:9;6163:18;6150:32;-1:-1:-1;;;;;6197:6:7;6194:30;6191:50;;;6237:1;6234;6227:12;6191:50;6276:58;6326:7;6317:6;6306:9;6302:22;6276:58;:::i;:::-;5770:624;;;;-1:-1:-1;5770:624:7;;-1:-1:-1;6353:8:7;;6250:84;5770:624;-1:-1:-1;;;5770:624:7:o;6399:687::-;6516:6;6524;6532;6585:2;6573:9;6564:7;6560:23;6556:32;6553:52;;;6601:1;6598;6591:12;6553:52;6641:9;6628:23;-1:-1:-1;;;;;6711:2:7;6703:6;6700:14;6697:34;;;6727:1;6724;6717:12;6697:34;6750:79;6821:7;6812:6;6801:9;6797:22;6750:79;:::i;:::-;6740:89;;6882:2;6871:9;6867:18;6854:32;6838:48;;6911:2;6901:8;6898:16;6895:36;;;6927:1;6924;6917:12;6895:36;;6966:60;7018:7;7007:8;6996:9;6992:24;6966:60;:::i;:::-;6399:687;;7045:8;;-1:-1:-1;6940:86:7;;-1:-1:-1;;;;6399:687:7:o;7091:258::-;7158:6;7166;7219:2;7207:9;7198:7;7194:23;7190:32;7187:52;;;7235:1;7232;7225:12;7187:52;7258:28;7276:9;7258:28;:::i;:::-;7248:38;;7305;7339:2;7328:9;7324:18;7305:38;:::i;7354:521::-;7466:6;7474;7482;7535:2;7523:9;7514:7;7510:23;7506:32;7503:52;;;7551:1;7548;7541:12;7503:52;7591:9;7578:23;-1:-1:-1;;;;;7616:6:7;7613:30;7610:50;;;7656:1;7653;7646:12;7610:50;7679:79;7750:7;7741:6;7730:9;7726:22;7679:79;:::i;:::-;7669:89;;;7777:37;7810:2;7799:9;7795:18;7777:37;:::i;:::-;7767:47;;7833:36;7865:2;7854:9;7850:18;7833:36;:::i;7880:907::-;7999:6;8007;8015;8023;8031;8039;8092:3;8080:9;8071:7;8067:23;8063:33;8060:53;;;8109:1;8106;8099:12;8060:53;8132:28;8150:9;8132:28;:::i;:::-;8122:38;;8179:37;8212:2;8201:9;8197:18;8179:37;:::i;:::-;8169:47;;8235:38;8269:2;8258:9;8254:18;8235:38;:::i;:::-;8225:48;;8324:2;8313:9;8309:18;8296:32;-1:-1:-1;;;;;8388:2:7;8380:6;8377:14;8374:34;;;8404:1;8401;8394:12;8374:34;8442:6;8431:9;8427:22;8417:32;;8487:7;8480:4;8476:2;8472:13;8468:27;8458:55;;8509:1;8506;8499:12;8458:55;8549:2;8536:16;8575:2;8567:6;8564:14;8561:34;;;8591:1;8588;8581:12;8561:34;8644:7;8639:2;8629:6;8626:1;8622:14;8618:2;8614:23;8610:32;8607:45;8604:65;;;8665:1;8662;8655:12;8604:65;8696:2;8692;8688:11;8678:21;;8718:6;8708:16;;;;;8743:38;8776:3;8765:9;8761:19;8743:38;:::i;:::-;8733:48;;7880:907;;;;;;;;:::o;9101:380::-;9180:1;9176:12;;;;9223;;;9244:61;;9298:4;9290:6;9286:17;9276:27;;9244:61;9351:2;9343:6;9340:14;9320:18;9317:38;9314:161;;9397:10;9392:3;9388:20;9385:1;9378:31;9432:4;9429:1;9422:15;9460:4;9457:1;9450:15;9486:180;9545:6;9598:2;9586:9;9577:7;9573:23;9569:32;9566:52;;;9614:1;9611;9604:12;9566:52;-1:-1:-1;9637:23:7;;9486:180;-1:-1:-1;9486:180:7:o;9671:265::-;9744:9;;;9775;;9792:15;;;9786:22;;9772:37;9762:168;;9852:10;9847:3;9843:20;9840:1;9833:31;9887:4;9884:1;9877:15;9915:4;9912:1;9905:15;9762:168;9671:265;;;;:::o","linkReferences":{}},"methodIdentifiers":{"ROOT_CHAIN()":"884673ac","blueprintOwner()":"f8407662","currentBlueprintId()":"5d79ea29","masterBlueprintServiceManager()":"0d0dd399","masterBlueprintServiceManagerAddress()":"a4d91fe9","onApprove((bytes,(uint64,uint64,uint64,uint64,uint64)),uint64,uint8)":"bb43abd9","onBlueprintCreated(uint64,address,address)":"0b6535d7","onJobCall(uint64,uint8,uint64,bytes)":"9838caa3","onJobResult(uint64,uint8,uint64,(bytes,(uint64,uint64,uint64,uint64,uint64)),bytes,bytes)":"37c29662","onRegister((bytes,(uint64,uint64,uint64,uint64,uint64)),bytes)":"9d0410ee","onReject((bytes,(uint64,uint64,uint64,uint64,uint64)),uint64)":"821c7be2","onRequest((uint64,address,(bytes,(uint64,uint64,uint64,uint64,uint64))[],bytes,address[],uint64,(uint8,bytes32),uint256))":"8b248065","onServiceInitialized(uint64,uint64,address,address[],uint64)":"d7deb482","onServiceTermination(uint64,address)":"a24e8a90","onSlash(uint64,bytes,uint8,uint256)":"0af7d743","onUnappliedSlash(uint64,bytes,uint8,uint256)":"e926cbd1","onUnregister((bytes,(uint64,uint64,uint64,uint64,uint64)))":"434698bb","onUpdatePriceTargets((bytes,(uint64,uint64,uint64,uint64,uint64)))":"fe0dd371","operators(address)":"13e7c9d8","queryDeveloperPaymentAddress(uint64)":"08179f35","queryDisputeOrigin(uint64)":"14b4df4c","querySlashingOrigin(uint64)":"74ceeb55","rootChain()":"987ab9db","serviceInstances(uint64)":"3e571835"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterBlueprintServiceManager\",\"type\":\"address\"}],\"name\":\"OnlyMasterBlueprintServiceManagerAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rootChain\",\"type\":\"address\"}],\"name\":\"OnlyRootChainAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ROOT_CHAIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blueprintOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlueprintId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterBlueprintServiceManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterBlueprintServiceManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mbsm\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"cpu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mem\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_hdd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_ssd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_nvme\",\"type\":\"uint64\"}],\"internalType\":\"struct ServiceOperators.PriceTargets\",\"name\":\"priceTargets\",\"type\":\"tuple\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"restakingPercent\",\"type\":\"uint8\"}],\"name\":\"onApprove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blueprintId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mbsm\",\"type\":\"address\"}],\"name\":\"onBlueprintCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"job\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"jobCallId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"inputs\",\"type\":\"bytes\"}],\"name\":\"onJobCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"job\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"jobCallId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"cpu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mem\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_hdd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_ssd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_nvme\",\"type\":\"uint64\"}],\"internalType\":\"struct ServiceOperators.PriceTargets\",\"name\":\"priceTargets\",\"type\":\"tuple\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"inputs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"outputs\",\"type\":\"bytes\"}],\"name\":\"onJobResult\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"cpu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mem\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_hdd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_ssd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_nvme\",\"type\":\"uint64\"}],\"internalType\":\"struct ServiceOperators.PriceTargets\",\"name\":\"priceTargets\",\"type\":\"tuple\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"registrationInputs\",\"type\":\"bytes\"}],\"name\":\"onRegister\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"cpu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mem\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_hdd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_ssd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_nvme\",\"type\":\"uint64\"}],\"internalType\":\"struct ServiceOperators.PriceTargets\",\"name\":\"priceTargets\",\"type\":\"tuple\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"onReject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"cpu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mem\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_hdd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_ssd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_nvme\",\"type\":\"uint64\"}],\"internalType\":\"struct ServiceOperators.PriceTargets\",\"name\":\"priceTargets\",\"type\":\"tuple\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences[]\",\"name\":\"operators\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"requestInputs\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"permittedCallers\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"enum ServiceOperators.AssetKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"internalType\":\"struct ServiceOperators.Asset\",\"name\":\"paymentAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ServiceOperators.RequestParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"onRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"permittedCallers\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"onServiceInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"onServiceTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offender\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"slashPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"name\":\"onSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offender\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"slashPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"name\":\"onUnappliedSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"cpu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mem\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_hdd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_ssd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_nvme\",\"type\":\"uint64\"}],\"internalType\":\"struct ServiceOperators.PriceTargets\",\"name\":\"priceTargets\",\"type\":\"tuple\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"onUnregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"cpu\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mem\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_hdd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_ssd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"storage_nvme\",\"type\":\"uint64\"}],\"internalType\":\"struct ServiceOperators.PriceTargets\",\"name\":\"priceTargets\",\"type\":\"tuple\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"onUpdatePriceTargets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"queryDeveloperPaymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"developerPaymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"queryDisputeOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"disputeOrigin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"querySlashingOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"slashingOrigin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rootChainAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"serviceInstances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is an example of a service blueprint that provides a single service to square a number. It demonstrates the lifecycle hooks that can be implemented in a service blueprint.\",\"kind\":\"dev\",\"methods\":{\"masterBlueprintServiceManagerAddress()\":{\"details\":\"Get the master blueprint service manager address\",\"returns\":{\"mbsm\":\"The address of the master blueprint service manager\"}},\"onApprove((bytes,(uint64,uint64,uint64,uint64,uint64)),uint64,uint8)\":{\"details\":\"Hook for service request approval. Called when a service request is approved by an operator.\",\"params\":{\"operator\":\"The operator's details.\",\"requestId\":\"The ID of the request.\",\"restakingPercent\":\"The percentage of the restaking amount (0-100).\"}},\"onBlueprintCreated(uint64,address,address)\":{\"details\":\"Hook to handle blueprint creation. Gets called by the root chain when a new blueprint is created. Could be a good place to store the master blueprint service manager address or any other blueprint related data.\",\"params\":{\"blueprintId\":\"The unique identifier for the blueprint.\",\"mbsm\":\"The address of the master blueprint service manager.\",\"owner\":\"The address of the blueprint owner.\"}},\"onJobCall(uint64,uint8,uint64,bytes)\":{\"details\":\"Hook for job calls on the service. Called when a job is called within the service context.\",\"params\":{\"inputs\":\"Inputs required for the job execution in bytes format.\",\"job\":\"The job identifier.\",\"jobCallId\":\"A unique ID for the job call.\",\"serviceId\":\"The ID of the service where the job is called.\"}},\"onJobResult(uint64,uint8,uint64,(bytes,(uint64,uint64,uint64,uint64,uint64)),bytes,bytes)\":{\"details\":\"Hook for handling job result. Called when operators send the result of a job execution.\",\"params\":{\"inputs\":\"Inputs used for the job execution in bytes format.\",\"job\":\"The job identifier.\",\"jobCallId\":\"The unique ID for the job call.\",\"operator\":\"The operator sending the result in bytes format.\",\"outputs\":\"Outputs resulting from the job execution in bytes format.\",\"serviceId\":\"The ID of the service related to the job.\"}},\"onRegister((bytes,(uint64,uint64,uint64,uint64,uint64)),bytes)\":{\"details\":\"Hook for service operator registration. Called when a service operator attempts to register with the blueprint.\",\"params\":{\"operator\":\"The operator's details.\",\"registrationInputs\":\"Inputs required for registration in bytes format.\"}},\"onReject((bytes,(uint64,uint64,uint64,uint64,uint64)),uint64)\":{\"details\":\"Hook for service request rejection. Called when a service request is rejected by an operator.\",\"params\":{\"operator\":\"The operator's details.\",\"requestId\":\"The ID of the request.\"}},\"onRequest((uint64,address,(bytes,(uint64,uint64,uint64,uint64,uint64))[],bytes,address[],uint64,(uint8,bytes32),uint256))\":{\"details\":\"Hook for service instance requests. Called when a user requests a service instance from the blueprint but this does not mean the service is initiated yet. To get notified when the service is initiated, implement the `onServiceInitialized` hook.\",\"params\":{\"params\":\"The parameters for the service request.\"}},\"onServiceInitialized(uint64,uint64,address,address[],uint64)\":{\"details\":\"Hook for service initialization. Called when a service is initialized. This hook is called after the service is approved from all of the operators.\",\"params\":{\"owner\":\"The owner of the service.\",\"permittedCallers\":\"The list of permitted callers for the service.\",\"requestId\":\"The ID of the request.\",\"serviceId\":\"The ID of the service.\",\"ttl\":\"The time-to-live for the service.\"}},\"onServiceTermination(uint64,address)\":{\"details\":\"Hook for service termination. Called when a service is terminated.\",\"params\":{\"owner\":\"The owner of the service.\",\"serviceId\":\"The ID of the service to be terminated.\"}},\"onSlash(uint64,bytes,uint8,uint256)\":{\"details\":\"Hook for handling applied slashes. Called when a slash is applied to an offender.\",\"params\":{\"offender\":\"The offender's details in bytes format.\",\"serviceId\":\"The ID of the service related to the slash.\",\"slashPercent\":\"The percentage of the slash.\",\"totalPayout\":\"The total payout amount in wei.\"}},\"onUnappliedSlash(uint64,bytes,uint8,uint256)\":{\"details\":\"Hook for handling unapplied slashes. Called when a slash is queued and still not yet applied to an offender.\",\"params\":{\"offender\":\"The offender's details in bytes format.\",\"serviceId\":\"The ID of the service related to the slash.\",\"slashPercent\":\"The percentage of the slash.\",\"totalPayout\":\"The total payout amount in wei.\"}},\"onUnregister((bytes,(uint64,uint64,uint64,uint64,uint64)))\":{\"details\":\"Hook for service operator unregistration. Called when a service operator attempts to unregister from the blueprint.\",\"params\":{\"operator\":\"The operator's details.\"}},\"onUpdatePriceTargets((bytes,(uint64,uint64,uint64,uint64,uint64)))\":{\"details\":\"Hook for updating operator's Price Targets. Called when an operator updates their price targets.\",\"params\":{\"operator\":\"The operator's details with the to be updated price targets.\"}},\"queryDeveloperPaymentAddress(uint64)\":{\"details\":\"Query the developer payment address for a service. This mainly used by the runtime or the Master Blueprint Service Manager to determine the developer payment address for a service.\",\"params\":{\"serviceId\":\"The ID of the service.\"},\"returns\":{\"developerPaymentAddress\":\"The address of the developer payment address for that service\"}},\"queryDisputeOrigin(uint64)\":{\"details\":\"Query the dispute origin for a service. This mainly used by the runtime to determine the allowed account that can dispute an unapplied slash and remove it. by default, the service manager is the only account that can dispute a service. override this function to allow other accounts to dispute a service.\",\"params\":{\"serviceId\":\"The ID of the service.\"},\"returns\":{\"disputeOrigin\":\"The account that can dispute the unapplied slash for that service\"}},\"querySlashingOrigin(uint64)\":{\"details\":\"Query the slashing origin for a service. This mainly used by the runtime to determine the allowed account that can slash a service. by default, the service manager is the only account that can slash a service. override this function to allow other accounts to slash a service.\",\"params\":{\"serviceId\":\"The ID of the service.\"},\"returns\":{\"slashingOrigin\":\"The account that can slash the offender.\"}},\"rootChain()\":{\"details\":\"Get the root chain address\",\"returns\":{\"rootChainAddress\":\"The address of the root chain\"}}},\"stateVariables\":{\"operators\":{\"details\":\"A mapping of all service operators registered with the blueprint. The key is the operator's address and the value is the operator's details.\"},\"serviceInstances\":{\"details\":\"A mapping of all service instances requested from the blueprint. The key is the service ID and the value is the service operator's address.\"}},\"title\":\"IncredibleSquaringBlueprint\",\"version\":1},\"userdoc\":{\"errors\":{\"OnlyMasterBlueprintServiceManagerAllowed(address,address)\":[{\"notice\":\"Error message for unauthorized access\"}],\"OnlyRootChainAllowed(address,address)\":[{\"notice\":\"Error message for unauthorized access\"}]},\"kind\":\"user\",\"methods\":{\"ROOT_CHAIN()\":{\"notice\":\"The address of the root chain\"},\"queryDeveloperPaymentAddress(uint64)\":{\"notice\":\"This function should be implemented by the Blueprint Service Manager contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/IncredibleSquaringBlueprint.sol\":\"IncredibleSquaringBlueprint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-contracts-5.1.0/=dependencies/tnt-core-0.1.0/dependencies/@openzeppelin-contracts-5.1.0/\",\":@openzeppelin/contracts/=dependencies/tnt-core-0.1.0/dependencies/@openzeppelin-contracts-5.1.0/\",\":forge-std-1.9.4/=dependencies/tnt-core-0.1.0/dependencies/forge-std-1.9.4/src/\",\":forge-std/=dependencies/tnt-core-0.1.0/dependencies/forge-std-1.9.4/src/\",\":incredible-squaring/=contracts/src/\",\":tnt-core-0.1.0/=dependencies/tnt-core-0.1.0/\",\":tnt-core/=dependencies/tnt-core-0.1.0/src/\"]},\"sources\":{\"contracts/src/IncredibleSquaringBlueprint.sol\":{\"keccak256\":\"0x0889a0c6da6b4e2ce19694dc3e65f65e1b9e1cd24fef23464a66fcd418059334\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://89fd0c45c8f1b03ce1a3150221fd2de81069622a39f78e17e85d8f674e49c35c\",\"dweb:/ipfs/QmYjQbtFkoNU3CevG8qNu3nuHfmcTXgRCiSjXwpG6VyVoj\"]},\"contracts/src/IncredibleSquaringInstance.sol\":{\"keccak256\":\"0xbc5cf198381cf0191e89a70dbf0c93968ccd1c02499eeb80272f0832b06eaad3\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://36928c648ac630ca168cc1d34486d626e70fb8458973726b0686f6b49538a638\",\"dweb:/ipfs/QmU5rbXzD354js6KN5Rk3hqFQaDCLbrUDPZaAU8MM8fUzM\"]},\"dependencies/tnt-core-0.1.0/src/BlueprintServiceManagerBase.sol\":{\"keccak256\":\"0xa962e69d2c5fba1b2dd0b9666b4f2cbae6fcf334a076e5cf5100ab65f0b0e228\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://7ddb802b04786172ff0ad2668eac232e807642dc71203266dbf021538b20d00b\",\"dweb:/ipfs/QmPYiECVHafY3JeFW17vwLMdzh42DvEUaeCySM7965NwrW\"]},\"src/IBlueprintServiceManager.sol\":{\"keccak256\":\"0xb3468e5c44331d3bbde70e338f1b2a8b1b70bd57fe8cf16ca4b5ae21f666ff39\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://2fda0a093ada6969505e8d944d07eadfe928d77aa84aabdb23b9d0fd90213e17\",\"dweb:/ipfs/QmaKWKQBKSYajMcKJ1VaBdktqsFELuoseodCyiYjKpUqo5\"]},\"src/Permissions.sol\":{\"keccak256\":\"0x53c50fb8c3a429917c43460be3177ef0e117241e116279a7c7138c771a5b3dfb\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://c46f4f98974eff1a102f1393b1c1ba5d1221cfe0ed69e2abdd8efca5794928c8\",\"dweb:/ipfs/QmXn2YZ7yzifLywMwHZAm9tWHp6qFAS66g3QA6v5ee4fjq\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"masterBlueprintServiceManager","type":"address"}],"type":"error","name":"OnlyMasterBlueprintServiceManagerAllowed"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"rootChain","type":"address"}],"type":"error","name":"OnlyRootChainAllowed"},{"inputs":[],"stateMutability":"view","type":"function","name":"ROOT_CHAIN","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"blueprintOwner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"currentBlueprintId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"masterBlueprintServiceManager","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"masterBlueprintServiceManagerAddress","outputs":[{"internalType":"address","name":"mbsm","type":"address"}]},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"struct ServiceOperators.PriceTargets","name":"priceTargets","type":"tuple","components":[{"internalType":"uint64","name":"cpu","type":"uint64"},{"internalType":"uint64","name":"mem","type":"uint64"},{"internalType":"uint64","name":"storage_hdd","type":"uint64"},{"internalType":"uint64","name":"storage_ssd","type":"uint64"},{"internalType":"uint64","name":"storage_nvme","type":"uint64"}]}]},{"internalType":"uint64","name":"requestId","type":"uint64"},{"internalType":"uint8","name":"restakingPercent","type":"uint8"}],"stateMutability":"payable","type":"function","name":"onApprove"},{"inputs":[{"internalType":"uint64","name":"blueprintId","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"mbsm","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"onBlueprintCreated"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"uint8","name":"job","type":"uint8"},{"internalType":"uint64","name":"jobCallId","type":"uint64"},{"internalType":"bytes","name":"inputs","type":"bytes"}],"stateMutability":"payable","type":"function","name":"onJobCall"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"uint8","name":"job","type":"uint8"},{"internalType":"uint64","name":"jobCallId","type":"uint64"},{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"struct ServiceOperators.PriceTargets","name":"priceTargets","type":"tuple","components":[{"internalType":"uint64","name":"cpu","type":"uint64"},{"internalType":"uint64","name":"mem","type":"uint64"},{"internalType":"uint64","name":"storage_hdd","type":"uint64"},{"internalType":"uint64","name":"storage_ssd","type":"uint64"},{"internalType":"uint64","name":"storage_nvme","type":"uint64"}]}]},{"internalType":"bytes","name":"inputs","type":"bytes"},{"internalType":"bytes","name":"outputs","type":"bytes"}],"stateMutability":"payable","type":"function","name":"onJobResult"},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"struct ServiceOperators.PriceTargets","name":"priceTargets","type":"tuple","components":[{"internalType":"uint64","name":"cpu","type":"uint64"},{"internalType":"uint64","name":"mem","type":"uint64"},{"internalType":"uint64","name":"storage_hdd","type":"uint64"},{"internalType":"uint64","name":"storage_ssd","type":"uint64"},{"internalType":"uint64","name":"storage_nvme","type":"uint64"}]}]},{"internalType":"bytes","name":"registrationInputs","type":"bytes"}],"stateMutability":"payable","type":"function","name":"onRegister"},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"struct ServiceOperators.PriceTargets","name":"priceTargets","type":"tuple","components":[{"internalType":"uint64","name":"cpu","type":"uint64"},{"internalType":"uint64","name":"mem","type":"uint64"},{"internalType":"uint64","name":"storage_hdd","type":"uint64"},{"internalType":"uint64","name":"storage_ssd","type":"uint64"},{"internalType":"uint64","name":"storage_nvme","type":"uint64"}]}]},{"internalType":"uint64","name":"requestId","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"onReject"},{"inputs":[{"internalType":"struct ServiceOperators.RequestParams","name":"params","type":"tuple","components":[{"internalType":"uint64","name":"requestId","type":"uint64"},{"internalType":"address","name":"requester","type":"address"},{"internalType":"struct ServiceOperators.OperatorPreferences[]","name":"operators","type":"tuple[]","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"struct ServiceOperators.PriceTargets","name":"priceTargets","type":"tuple","components":[{"internalType":"uint64","name":"cpu","type":"uint64"},{"internalType":"uint64","name":"mem","type":"uint64"},{"internalType":"uint64","name":"storage_hdd","type":"uint64"},{"internalType":"uint64","name":"storage_ssd","type":"uint64"},{"internalType":"uint64","name":"storage_nvme","type":"uint64"}]}]},{"internalType":"bytes","name":"requestInputs","type":"bytes"},{"internalType":"address[]","name":"permittedCallers","type":"address[]"},{"internalType":"uint64","name":"ttl","type":"uint64"},{"internalType":"struct ServiceOperators.Asset","name":"paymentAsset","type":"tuple","components":[{"internalType":"enum ServiceOperators.AssetKind","name":"kind","type":"uint8"},{"internalType":"bytes32","name":"data","type":"bytes32"}]},{"internalType":"uint256","name":"amount","type":"uint256"}]}],"stateMutability":"payable","type":"function","name":"onRequest"},{"inputs":[{"internalType":"uint64","name":"requestId","type":"uint64"},{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"permittedCallers","type":"address[]"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"onServiceInitialized"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"onServiceTermination"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"bytes","name":"offender","type":"bytes"},{"internalType":"uint8","name":"slashPercent","type":"uint8"},{"internalType":"uint256","name":"totalPayout","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"onSlash"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"bytes","name":"offender","type":"bytes"},{"internalType":"uint8","name":"slashPercent","type":"uint8"},{"internalType":"uint256","name":"totalPayout","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"onUnappliedSlash"},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"struct ServiceOperators.PriceTargets","name":"priceTargets","type":"tuple","components":[{"internalType":"uint64","name":"cpu","type":"uint64"},{"internalType":"uint64","name":"mem","type":"uint64"},{"internalType":"uint64","name":"storage_hdd","type":"uint64"},{"internalType":"uint64","name":"storage_ssd","type":"uint64"},{"internalType":"uint64","name":"storage_nvme","type":"uint64"}]}]}],"stateMutability":"nonpayable","type":"function","name":"onUnregister"},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"struct ServiceOperators.PriceTargets","name":"priceTargets","type":"tuple","components":[{"internalType":"uint64","name":"cpu","type":"uint64"},{"internalType":"uint64","name":"mem","type":"uint64"},{"internalType":"uint64","name":"storage_hdd","type":"uint64"},{"internalType":"uint64","name":"storage_ssd","type":"uint64"},{"internalType":"uint64","name":"storage_nvme","type":"uint64"}]}]}],"stateMutability":"payable","type":"function","name":"onUpdatePriceTargets"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"operators","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function","name":"queryDeveloperPaymentAddress","outputs":[{"internalType":"address","name":"developerPaymentAddress","type":"address"}]},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function","name":"queryDisputeOrigin","outputs":[{"internalType":"address","name":"disputeOrigin","type":"address"}]},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function","name":"querySlashingOrigin","outputs":[{"internalType":"address","name":"slashingOrigin","type":"address"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"rootChain","outputs":[{"internalType":"address","name":"rootChainAddress","type":"address"}]},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function","name":"serviceInstances","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"masterBlueprintServiceManagerAddress()":{"details":"Get the master blueprint service manager address","returns":{"mbsm":"The address of the master blueprint service manager"}},"onApprove((bytes,(uint64,uint64,uint64,uint64,uint64)),uint64,uint8)":{"details":"Hook for service request approval. Called when a service request is approved by an operator.","params":{"operator":"The operator's details.","requestId":"The ID of the request.","restakingPercent":"The percentage of the restaking amount (0-100)."}},"onBlueprintCreated(uint64,address,address)":{"details":"Hook to handle blueprint creation. Gets called by the root chain when a new blueprint is created. Could be a good place to store the master blueprint service manager address or any other blueprint related data.","params":{"blueprintId":"The unique identifier for the blueprint.","mbsm":"The address of the master blueprint service manager.","owner":"The address of the blueprint owner."}},"onJobCall(uint64,uint8,uint64,bytes)":{"details":"Hook for job calls on the service. Called when a job is called within the service context.","params":{"inputs":"Inputs required for the job execution in bytes format.","job":"The job identifier.","jobCallId":"A unique ID for the job call.","serviceId":"The ID of the service where the job is called."}},"onJobResult(uint64,uint8,uint64,(bytes,(uint64,uint64,uint64,uint64,uint64)),bytes,bytes)":{"details":"Hook for handling job result. Called when operators send the result of a job execution.","params":{"inputs":"Inputs used for the job execution in bytes format.","job":"The job identifier.","jobCallId":"The unique ID for the job call.","operator":"The operator sending the result in bytes format.","outputs":"Outputs resulting from the job execution in bytes format.","serviceId":"The ID of the service related to the job."}},"onRegister((bytes,(uint64,uint64,uint64,uint64,uint64)),bytes)":{"details":"Hook for service operator registration. Called when a service operator attempts to register with the blueprint.","params":{"operator":"The operator's details.","registrationInputs":"Inputs required for registration in bytes format."}},"onReject((bytes,(uint64,uint64,uint64,uint64,uint64)),uint64)":{"details":"Hook for service request rejection. Called when a service request is rejected by an operator.","params":{"operator":"The operator's details.","requestId":"The ID of the request."}},"onRequest((uint64,address,(bytes,(uint64,uint64,uint64,uint64,uint64))[],bytes,address[],uint64,(uint8,bytes32),uint256))":{"details":"Hook for service instance requests. Called when a user requests a service instance from the blueprint but this does not mean the service is initiated yet. To get notified when the service is initiated, implement the `onServiceInitialized` hook.","params":{"params":"The parameters for the service request."}},"onServiceInitialized(uint64,uint64,address,address[],uint64)":{"details":"Hook for service initialization. Called when a service is initialized. This hook is called after the service is approved from all of the operators.","params":{"owner":"The owner of the service.","permittedCallers":"The list of permitted callers for the service.","requestId":"The ID of the request.","serviceId":"The ID of the service.","ttl":"The time-to-live for the service."}},"onServiceTermination(uint64,address)":{"details":"Hook for service termination. Called when a service is terminated.","params":{"owner":"The owner of the service.","serviceId":"The ID of the service to be terminated."}},"onSlash(uint64,bytes,uint8,uint256)":{"details":"Hook for handling applied slashes. Called when a slash is applied to an offender.","params":{"offender":"The offender's details in bytes format.","serviceId":"The ID of the service related to the slash.","slashPercent":"The percentage of the slash.","totalPayout":"The total payout amount in wei."}},"onUnappliedSlash(uint64,bytes,uint8,uint256)":{"details":"Hook for handling unapplied slashes. Called when a slash is queued and still not yet applied to an offender.","params":{"offender":"The offender's details in bytes format.","serviceId":"The ID of the service related to the slash.","slashPercent":"The percentage of the slash.","totalPayout":"The total payout amount in wei."}},"onUnregister((bytes,(uint64,uint64,uint64,uint64,uint64)))":{"details":"Hook for service operator unregistration. Called when a service operator attempts to unregister from the blueprint.","params":{"operator":"The operator's details."}},"onUpdatePriceTargets((bytes,(uint64,uint64,uint64,uint64,uint64)))":{"details":"Hook for updating operator's Price Targets. Called when an operator updates their price targets.","params":{"operator":"The operator's details with the to be updated price targets."}},"queryDeveloperPaymentAddress(uint64)":{"details":"Query the developer payment address for a service. This mainly used by the runtime or the Master Blueprint Service Manager to determine the developer payment address for a service.","params":{"serviceId":"The ID of the service."},"returns":{"developerPaymentAddress":"The address of the developer payment address for that service"}},"queryDisputeOrigin(uint64)":{"details":"Query the dispute origin for a service. This mainly used by the runtime to determine the allowed account that can dispute an unapplied slash and remove it. by default, the service manager is the only account that can dispute a service. override this function to allow other accounts to dispute a service.","params":{"serviceId":"The ID of the service."},"returns":{"disputeOrigin":"The account that can dispute the unapplied slash for that service"}},"querySlashingOrigin(uint64)":{"details":"Query the slashing origin for a service. This mainly used by the runtime to determine the allowed account that can slash a service. by default, the service manager is the only account that can slash a service. override this function to allow other accounts to slash a service.","params":{"serviceId":"The ID of the service."},"returns":{"slashingOrigin":"The account that can slash the offender."}},"rootChain()":{"details":"Get the root chain address","returns":{"rootChainAddress":"The address of the root chain"}}},"version":1},"userdoc":{"kind":"user","methods":{"ROOT_CHAIN()":{"notice":"The address of the root chain"},"queryDeveloperPaymentAddress(uint64)":{"notice":"This function should be implemented by the Blueprint Service Manager contract."}},"version":1}},"settings":{"remappings":["@openzeppelin-contracts-5.1.0/=dependencies/tnt-core-0.1.0/dependencies/@openzeppelin-contracts-5.1.0/","@openzeppelin/contracts/=dependencies/tnt-core-0.1.0/dependencies/@openzeppelin-contracts-5.1.0/","forge-std-1.9.4/=dependencies/tnt-core-0.1.0/dependencies/forge-std-1.9.4/src/","forge-std/=dependencies/tnt-core-0.1.0/dependencies/forge-std-1.9.4/src/","incredible-squaring/=contracts/src/","tnt-core-0.1.0/=dependencies/tnt-core-0.1.0/","tnt-core/=dependencies/tnt-core-0.1.0/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/src/IncredibleSquaringBlueprint.sol":"IncredibleSquaringBlueprint"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/src/IncredibleSquaringBlueprint.sol":{"keccak256":"0x0889a0c6da6b4e2ce19694dc3e65f65e1b9e1cd24fef23464a66fcd418059334","urls":["bzz-raw://89fd0c45c8f1b03ce1a3150221fd2de81069622a39f78e17e85d8f674e49c35c","dweb:/ipfs/QmYjQbtFkoNU3CevG8qNu3nuHfmcTXgRCiSjXwpG6VyVoj"],"license":"UNLICENSED"},"contracts/src/IncredibleSquaringInstance.sol":{"keccak256":"0xbc5cf198381cf0191e89a70dbf0c93968ccd1c02499eeb80272f0832b06eaad3","urls":["bzz-raw://36928c648ac630ca168cc1d34486d626e70fb8458973726b0686f6b49538a638","dweb:/ipfs/QmU5rbXzD354js6KN5Rk3hqFQaDCLbrUDPZaAU8MM8fUzM"],"license":"UNLICENSED"},"dependencies/tnt-core-0.1.0/src/BlueprintServiceManagerBase.sol":{"keccak256":"0xa962e69d2c5fba1b2dd0b9666b4f2cbae6fcf334a076e5cf5100ab65f0b0e228","urls":["bzz-raw://7ddb802b04786172ff0ad2668eac232e807642dc71203266dbf021538b20d00b","dweb:/ipfs/QmPYiECVHafY3JeFW17vwLMdzh42DvEUaeCySM7965NwrW"],"license":"UNLICENSED"},"src/IBlueprintServiceManager.sol":{"keccak256":"0xb3468e5c44331d3bbde70e338f1b2a8b1b70bd57fe8cf16ca4b5ae21f666ff39","urls":["bzz-raw://2fda0a093ada6969505e8d944d07eadfe928d77aa84aabdb23b9d0fd90213e17","dweb:/ipfs/QmaKWKQBKSYajMcKJ1VaBdktqsFELuoseodCyiYjKpUqo5"],"license":"UNLICENSED"},"src/Permissions.sol":{"keccak256":"0x53c50fb8c3a429917c43460be3177ef0e117241e116279a7c7138c771a5b3dfb","urls":["bzz-raw://c46f4f98974eff1a102f1393b1c1ba5d1221cfe0ed69e2abdd8efca5794928c8","dweb:/ipfs/QmXn2YZ7yzifLywMwHZAm9tWHp6qFAS66g3QA6v5ee4fjq"],"license":"UNLICENSED"}},"version":1},"id":0}
"#,
    ).expect("Failed to create mock contract JSON file");

    // Create a simple forge.toml file to avoid Foundry trying to build anything
    fs::write(
        blueprint_dir.join("foundry.toml"),
        r#"[profile.default]
src = "contracts"
out = "contracts/out"
libs = ["lib"]
"#,
    )
    .expect("Failed to write foundry.toml");

    // Create Cargo.toml
    fs::write(
        blueprint_dir.join("Cargo.toml"),
        format!(
            r#"[package]
name = "incredible-squaring-blueprint"
version = "0.1.1"
description = "A Simple Blueprint to demo how blueprints work on Tangle Network"
edition = "2021"
license = "MIT OR Apache-2.0"
publish = false

[dependencies]
# Gadget dependencies
blueprint-sdk = {{ path = "{}/crates/sdk", features = ["std", "macros", "tangle"] }}

[dev-dependencies]
blueprint-sdk = {{ path = "{}/crates/sdk", features = ["std", "tangle", "testing"] }}
color-eyre = {{ version = "0.6", features = ["capture-spantrace", "track-caller"] }}
tokio = {{ version = "1", features = ["full"] }}

[build-dependencies]
blueprint-metadata = {{ path = "{}/crates/blueprint/metadata" }}

[package.metadata.blueprint]
manager = {{ Evm = "IncredibleSquaringBlueprint" }}
master_revision = "Latest"
"#,
            crates_dir.display(),
            crates_dir.display(),
            crates_dir.display()
        ),
    )
    .expect("Failed to write Cargo.toml");

    // Create blueprint.json
    fs::write(
        blueprint_dir.join("blueprint.json"),
        format!(
            r#"{{
  "metadata": {{
    "name": "incredible-squaring-blueprint",
    "description": "A Simple Blueprint to demo how blueprints work on Tangle Network",
    "author": "Tangle Network",
    "category": null,
    "code_repository": "https://github.com/tangle-network/gadget",
    "logo": null,
    "website": "https://tangle.tools",
    "license": "MIT OR Apache-2.0"
  }},
  "manager": {{
    "Evm": "contracts/out/IncredibleSquaringBlueprint.sol/IncredibleSquaringBlueprint.json"
  }},
  "master_manager_revision": "Latest",
  "jobs": [
    {{
      "job_id": 0,
      "metadata": {{
        "name": "xsquare",
        "description": "Returns x^2 saturating to [`u64::MAX`] if overflow occurs."
      }},
      "params": [
        "Uint64"
      ],
      "result": [
        "Uint64"
      ]
    }}
  ],
  "registration_params": [],
  "request_params": [],
  "gadget": {{
    "Native": {{
      "sources": [
      {{
        "fetcher": {{
          "Testing": {{
            "cargo_package": "incredible-squaring-blueprint",
            "cargo_bin": "main",
            "base_path": "{}"
          }}
        }}
      }}
    ]
  }}
  }}
}}"#,
            blueprint_dir.display()
        ),
    )
    .expect("Failed to write blueprint.json");

    // Create main.rs (combined lib.rs and main.rs)
    fs::write(
        blueprint_dir.join("src").join("main.rs"),
        r#"use std::convert::Infallible;
use blueprint_sdk::event_listeners::tangle::events::TangleEventListener;
use blueprint_sdk::event_listeners::tangle::services::{services_post_processor, services_pre_processor};
use blueprint_sdk::macros::contexts::{ServicesContext, TangleClientContext};
use blueprint_sdk::macros::ext::tangle::tangle_subxt::tangle_testnet_runtime::api::services::events::JobCalled;
use blueprint_sdk::config::GadgetConfiguration;
use blueprint_sdk::logging::info;
use blueprint_sdk::macros::ext::tangle::tangle_subxt::subxt::tx::Signer;
use blueprint_sdk::runners::core::runner::BlueprintRunner;
use blueprint_sdk::runners::tangle::tangle::TangleConfig;

#[derive(Clone, TangleClientContext, ServicesContext)]
pub struct MyContext {
    #[config]
    pub env: GadgetConfiguration,
    #[call_id]
    pub call_id: Option<u64>,
}

#[blueprint_sdk::job(
    id = 0,
    params(x),
    event_listener(
        listener = TangleEventListener<MyContext, JobCalled>,
        pre_processor = services_pre_processor,
        post_processor = services_post_processor,
    ),
)]
/// Returns x^2 saturating to [`u64::MAX`] if overflow occurs.
pub fn xsquare(x: u64, _context: MyContext) -> Result<u64, Infallible> {
    Ok(x.saturating_pow(2))
}

#[blueprint_sdk::main(env)]
async fn main() {
    let context = MyContext {
        env: env.clone(),
        call_id: None,
    };

    let x_square = XsquareEventHandler::new(&env, context).await?;

    info!(
        "Starting the event watcher for {} ...",
        x_square.signer.account_id()
    );

    info!("~~~ Executing the incredible squaring blueprint ~~~");
    let tangle_config = TangleConfig::default();
    BlueprintRunner::new(tangle_config, env)
        .job(x_square)
        .run()
        .await?;

    info!("Exiting...");
    Ok(())
}"#,
    ).expect("Failed to write main.rs");
    (temp_dir, blueprint_dir)
}

#[tokio::test]
async fn test_create_blueprint() {
    let (temp_dir, blueprint_dir) = create_test_blueprint();

    // Check that the files were created
    assert!(blueprint_dir.join("Cargo.toml").exists());
    assert!(blueprint_dir.join("blueprint.json").exists());
    assert!(blueprint_dir.join("src").join("main.rs").exists());

    // Keep temp_dir in scope to prevent cleanup
    drop(temp_dir);
}

#[tokio::test]
async fn test_blueprint_build() -> Result<(), Box<dyn std::error::Error>> {
    let (temp_dir, blueprint_dir) = create_test_blueprint();

    // Build the blueprint
    let status = std::process::Command::new("cargo")
        .args(["build", "--manifest-path"])
        .arg(blueprint_dir.join("Cargo.toml"))
        .status()?;

    if !status.success() {
        return Err("Failed to build blueprint".into());
    }

    drop(temp_dir);

    Ok(())
}
