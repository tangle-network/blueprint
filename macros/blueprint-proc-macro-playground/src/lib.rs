use gadget_blueprint_proc_macro::{job, registration_hook, request_hook};

/// Simple Threashold (t) Keygen Job for n parties.
#[job(id = 0, params(n, t), result(_), verifier(evm = "TestContract"))]
pub fn keygen(n: u16, t: u8) -> Vec<u8> {
    let _ = (n, t);
    vec![0; 33]
}

/// Sign a message using a key generated by the keygen job.
#[job(id = 1, params(keygen_id, data), result(_))]
pub fn sign(keygen_id: u64, data: Vec<u8>) -> Vec<u8> {
    let _ = (keygen_id, data);
    vec![0; 65]
}

#[registration_hook(evm = "RegistrationContract")]
pub fn my_registration_hook(pubkey: Vec<u8>);

#[request_hook(evm = "RequestContract")]
pub fn my_request_hook(nft_id: u64);

#[cfg(test)]
mod tests {

    #[test]
    fn generated_blueprint() {
        eprintln!("{}", super::KEYGEN_JOB_DEF);
        assert_eq!(super::KEYGEN_JOB_ID, 0);
    }
}
