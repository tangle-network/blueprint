use std::fs;
use std::path::PathBuf;
use tempfile::TempDir;

/// Creates a temporary directory with the incredible-squaring blueprint
///
/// This function creates a temporary directory and populates it with the files needed
/// for the incredible-squaring blueprint. It returns the temporary directory and the path
/// to the blueprint directory.
///
/// # Panics
///
/// - Uses expects for all errors, failing with a panic on any error when generating the blueprint files
#[must_use]
pub fn create_test_blueprint() -> (TempDir, PathBuf) {
    let temp_dir = TempDir::new().expect("Failed to create temporary directory");
    let blueprint_dir = temp_dir.path().join("test-blueprint");

    let current_dir = std::env::current_dir().expect("Failed to get current directory");
    let crates_dir = current_dir
        .parent()
        .expect("Failed to go back one directory");

    // Create directory structure
    fs::create_dir(&blueprint_dir).expect("Failed to create blueprint directory");
    fs::create_dir(blueprint_dir.join("src")).expect("Failed to create src directory");

    // Create contracts directory and subdirectories
    fs::create_dir(blueprint_dir.join("contracts")).expect("Failed to create contracts directory");
    fs::create_dir_all(
        blueprint_dir
            .join("contracts")
            .join("out")
            .join("ExperimentalBlueprint.sol"),
    )
    .expect("Failed to create contract output directories");

    // Create a mock contract JSON file
    fs::write(
        blueprint_dir.join("contracts").join("out").join("ExperimentalBlueprint.sol").join("ExperimentalBlueprint.json"),
        r#"{"abi":[{"type":"function","name":"REWARDS_PALLET","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"ROOT_CHAIN","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"blueprintOwner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"canJoin","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]}],"outputs":[{"name":"allowed","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"canLeave","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]}],"outputs":[{"name":"allowed","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"currentBlueprintId","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"masterBlueprintServiceManager","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"masterBlueprintServiceManagerAddress","inputs":[],"outputs":[{"name":"mbsm","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"onApprove","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]},{"name":"requestId","type":"uint64","internalType":"uint64"},{"name":"restakingPercent","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onBlueprintCreated","inputs":[{"name":"blueprintId","type":"uint64","internalType":"uint64"},{"name":"owner","type":"address","internalType":"address"},{"name":"mbsm","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onJobCall","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"job","type":"uint8","internalType":"uint8"},{"name":"jobCallId","type":"uint64","internalType":"uint64"},{"name":"inputs","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onJobResult","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"job","type":"uint8","internalType":"uint8"},{"name":"jobCallId","type":"uint64","internalType":"uint64"},{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]},{"name":"inputs","type":"bytes","internalType":"bytes"},{"name":"outputs","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onOperatorJoined","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onOperatorLeft","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onRegister","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]},{"name":"registrationInputs","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onReject","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]},{"name":"requestId","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onRequest","inputs":[{"name":"params","type":"tuple","internalType":"struct ServiceOperators.RequestParams","components":[{"name":"requestId","type":"uint64","internalType":"uint64"},{"name":"requester","type":"address","internalType":"address"},{"name":"operators","type":"tuple[]","internalType":"struct ServiceOperators.OperatorPreferences[]","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]},{"name":"requestInputs","type":"bytes","internalType":"bytes"},{"name":"permittedCallers","type":"address[]","internalType":"address[]"},{"name":"ttl","type":"uint64","internalType":"uint64"},{"name":"paymentAsset","type":"tuple","internalType":"struct Assets.Asset","components":[{"name":"kind","type":"uint8","internalType":"enum Assets.Kind"},{"name":"data","type":"bytes32","internalType":"bytes32"}]},{"name":"amount","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"onServiceInitialized","inputs":[{"name":"requestId","type":"uint64","internalType":"uint64"},{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"owner","type":"address","internalType":"address"},{"name":"permittedCallers","type":"address[]","internalType":"address[]"},{"name":"ttl","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onServiceTermination","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"owner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onSlash","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"offender","type":"bytes","internalType":"bytes"},{"name":"slashPercent","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onUnappliedSlash","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"offender","type":"bytes","internalType":"bytes"},{"name":"slashPercent","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onUnregister","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"onUpdateRpcAddress","inputs":[{"name":"operator","type":"tuple","internalType":"struct ServiceOperators.OperatorPreferences","components":[{"name":"ecdsaPublicKey","type":"bytes","internalType":"bytes"},{"name":"rpcAddress","type":"string","internalType":"string"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"queryDeveloperPaymentAddress","inputs":[{"name":"","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"developerPaymentAddress","type":"address","internalType":"address payable"}],"stateMutability":"view"},{"type":"function","name":"queryDisputeOrigin","inputs":[{"name":"","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"disputeOrigin","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"queryIsPaymentAssetAllowed","inputs":[{"name":"serviceId","type":"uint64","internalType":"uint64"},{"name":"asset","type":"tuple","internalType":"struct Assets.Asset","components":[{"name":"kind","type":"uint8","internalType":"enum Assets.Kind"},{"name":"data","type":"bytes32","internalType":"bytes32"}]}],"outputs":[{"name":"isAllowed","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"querySlashingOrigin","inputs":[{"name":"","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"slashingOrigin","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"rewardsPallet","inputs":[],"outputs":[{"name":"rewardsPalletAddress","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"function","name":"rootChain","inputs":[],"outputs":[{"name":"rootChainAddress","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"error","name":"OnlyMasterBlueprintServiceManagerAllowed","inputs":[{"name":"caller","type":"address","internalType":"address"},{"name":"masterBlueprintServiceManager","type":"address","internalType":"address"}]},{"type":"error","name":"OnlyRootChainAllowed","inputs":[{"name":"caller","type":"address","internalType":"address"},{"name":"rootChain","type":"address","internalType":"address"}]},{"type":"error","name":"UnsupportedAssetKind","inputs":[{"name":"kind","type":"uint256","internalType":"uint256"}]}],"bytecode":{"object":"","sourceMap":"331:66:0:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"","sourceMap":"331:66:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6057:201:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4177:182;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1529:239;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;586:44:9;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5465:183:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5879:127;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;521:58:9;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1249:116;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5167:247:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3673:304;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6309:247;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2621:226;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1037:33;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5699:129;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4634:246;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4410:173;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;386:79:9;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4931:185:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3416:206;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1024:104:9;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4028:98:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2460:110;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1506:138:9;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2898:177:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1819:212;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3126:239;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2246:163;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2082:113;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1132:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6057:201;6166:39;6236:14;;;;;;;;;;;6221:30;;6057:201;;;:::o;4177:182::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;4177:182:3;;;;:::o;1529:239::-;423:42:9;1812:24;;:10;:24;;;1808:106;;1880:10;423:42;1859:44;;;;;;;;;;;;:::i;:::-;;;;;;;;1808:106;1672:11:3::1;1651:32;;:18;:32;;;;1710:5;1693:14;;:22;;;;;;;;;;;;;;;;;;1757:4;1725:29;;:36;;;;;;;;;;;;;;;;;;1529:239:::0;;;:::o;586:44:9:-;;;;;;;;;;;;;:::o;5465:183:3:-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;5465:183:3;;:::o;5879:127::-;5946:21;5994:4;5979:20;;5879:127;;;:::o;521:58:9:-;570:8;521:58;:::o;1249:116::-;1297:28;570:8;1337:21;;1249:116;:::o;5167:247:3:-;5367:12;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;5402:5:3::1;5395:12;;5167:247:::0;;;;:::o;3673:304::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;3673:304:3;;;;;;;;:::o;6309:247::-;6477:14;6514:35;6532:9;6543:5;6514:17;:35::i;:::-;6507:42;;6309:247;;;;:::o;2621:226::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;2621:226:3;;;:::o;1037:33::-;;;;:::o;5699:129::-;5767:22;5816:4;5801:20;;5699:129;;;:::o;4634:246::-;4833:12;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;4868:5:3::1;4861:12;;4634:246:::0;;;;:::o;4410:173::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;4410:173:3;;;;:::o;386:79:9:-;423:42;386:79;:::o;4931:185:3:-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;4931:185:3;;:::o;3416:206::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;3416:206:3;;;;;:::o;1024:104:9:-;1068:24;423:42;1104:17;;1024:104;:::o;4028:98:3:-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;4028:98:3;;:::o;2460:110::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;2460:110:3;:::o;1506:138:9:-;1577:12;1608:29;;;;;;;;;;;1601:36;;1506:138;:::o;2898:177:3:-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;2898:177:3;;:::o;1819:212::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;1819:212:3;;;:::o;3126:239::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;3126:239:3;;;;;;:::o;2246:163::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;2246:163:3;:::o;2082:113::-;2154:29:9;;;;;;;;;;;2140:43;;:10;:43;;;2136:164;;2247:10;2259:29;;;;;;;;;;;2206:83;;;;;;;;;;;;:::i;:::-;;;;;;;;2136:164;2082:113:3;:::o;1132:29::-;;;;;;;;;;;;;:::o;10792:381::-;10897:4;10964:16;:5;:14;;;;;;;;;;:::i;:::-;;:16::i;:::-;10960:207;;;11003:4;10996:11;;;;10960:207;11038:20;11061:17;:5;:15;;;;;;;;;;:::i;:::-;;:17::i;:::-;11038:40;;11099:57;11143:12;11099:23;:34;11123:9;11099:34;;;;;;;;;;;;;;;:43;;:57;;;;:::i;:::-;11092:64;;;10792:381;;;;;:::o;6143:404:7:-;6204:4;6224:14;6232:5;6224:7;:14::i;:::-;6220:321;;;6254:20;6301:5;:10;;;6293:19;;6254:60;;6360:1;6336:26;;:12;:26;;;6328:35;;;;;6220:321;6384:15;6393:5;6384:8;:15::i;:::-;6380:161;;;6415:15;6441:5;:10;;;6433:19;;6415:37;;6485:1;6474:7;:12;6466:21;;;;;6380:161;6525:5;6518:12;;6143:404;;;;:::o;1620:335::-;1682:7;1705:14;1713:5;1705:7;:14::i;:::-;1701:248;;;1766:5;:10;;;1758:19;;1735:44;;;;1701:248;1800:15;1809:5;1800:8;:15::i;:::-;1796:153;;;1838:21;1848:5;:10;;;1838:9;:21::i;:::-;1831:28;;;;1796:153;1926:5;:10;;;1918:19;;;;;;;;:::i;:::-;;1897:41;;;;;;;;;;;:::i;:::-;;;;;;;;1620:335;;;;:::o;8844:165:1:-;8924:4;8947:55;8957:3;:10;;8993:5;8977:23;;8969:32;;8947:9;:55::i;:::-;8940:62;;8844:165;;;;:::o;4496:114:7:-;4556:4;4593:10;4579:24;;;;;;;;:::i;:::-;;:5;:10;;;:24;;;;;;;;:::i;:::-;;;4572:31;;4496:114;;;:::o;4892:116::-;4953:4;4990:11;4976:25;;;;;;;;:::i;:::-;;:5;:10;;;:25;;;;;;;;:::i;:::-;;;4969:32;;4892:116;;;:::o;2271:387::-;2330:7;2641;2633:16;;2612:17;2604:45;2581:70;;2271:387;;;:::o;4264:129:1:-;4337:4;4385:1;4360:3;:14;;:21;4375:5;4360:21;;;;;;;;;;;;:26;;4353:33;;4264:129;;;;:::o;7:75:11:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:101;370:7;410:18;403:5;399:30;388:41;;334:101;;;:::o;441:120::-;513:23;530:5;513:23;:::i;:::-;506:5;503:34;493:62;;551:1;548;541:12;493:62;441:120;:::o;567:137::-;612:5;650:6;637:20;628:29;;666:32;692:5;666:32;:::i;:::-;567:137;;;;:::o;710:327::-;768:6;817:2;805:9;796:7;792:23;788:32;785:119;;;823:79;;:::i;:::-;785:119;943:1;968:52;1012:7;1003:6;992:9;988:22;968:52;:::i;:::-;958:62;;914:116;710:327;;;;:::o;1043:126::-;1080:7;1120:42;1113:5;1109:54;1098:65;;1043:126;;;:::o;1175:104::-;1220:7;1249:24;1267:5;1249:24;:::i;:::-;1238:35;;1175:104;;;:::o;1285:142::-;1388:32;1414:5;1388:32;:::i;:::-;1383:3;1376:45;1285:142;;:::o;1433:254::-;1542:4;1580:2;1569:9;1565:18;1557:26;;1593:87;1677:1;1666:9;1662:17;1653:6;1593:87;:::i;:::-;1433:254;;;;:::o;1693:117::-;1802:1;1799;1792:12;1816:117;1925:1;1922;1915:12;1939:117;2048:1;2045;2038:12;2075:552;2132:8;2142:6;2192:3;2185:4;2177:6;2173:17;2169:27;2159:122;;2200:79;;:::i;:::-;2159:122;2313:6;2300:20;2290:30;;2343:18;2335:6;2332:30;2329:117;;;2365:79;;:::i;:::-;2329:117;2479:4;2471:6;2467:17;2455:29;;2533:3;2525:4;2517:6;2513:17;2503:8;2499:32;2496:41;2493:128;;;2540:79;;:::i;:::-;2493:128;2075:552;;;;;:::o;2633:86::-;2668:7;2708:4;2701:5;2697:16;2686:27;;2633:86;;;:::o;2725:118::-;2796:22;2812:5;2796:22;:::i;:::-;2789:5;2786:33;2776:61;;2833:1;2830;2823:12;2776:61;2725:118;:::o;2849:135::-;2893:5;2931:6;2918:20;2909:29;;2947:31;2972:5;2947:31;:::i;:::-;2849:135;;;;:::o;2990:811::-;3075:6;3083;3091;3099;3148:2;3136:9;3127:7;3123:23;3119:32;3116:119;;;3154:79;;:::i;:::-;3116:119;3274:1;3299:52;3343:7;3334:6;3323:9;3319:22;3299:52;:::i;:::-;3289:62;;3245:116;3428:2;3417:9;3413:18;3400:32;3459:18;3451:6;3448:30;3445:117;;;3481:79;;:::i;:::-;3445:117;3594:64;3650:7;3641:6;3630:9;3626:22;3594:64;:::i;:::-;3576:82;;;;3371:297;3707:2;3733:51;3776:7;3767:6;3756:9;3752:22;3733:51;:::i;:::-;3723:61;;3678:116;2990:811;;;;;;;:::o;3807:96::-;3844:7;3873:24;3891:5;3873:24;:::i;:::-;3862:35;;3807:96;;;:::o;3909:122::-;3982:24;4000:5;3982:24;:::i;:::-;3975:5;3972:35;3962:63;;4021:1;4018;4011:12;3962:63;3909:122;:::o;4037:139::-;4083:5;4121:6;4108:20;4099:29;;4137:33;4164:5;4137:33;:::i;:::-;4037:139;;;;:::o;4182:617::-;4258:6;4266;4274;4323:2;4311:9;4302:7;4298:23;4294:32;4291:119;;;4329:79;;:::i;:::-;4291:119;4449:1;4474:52;4518:7;4509:6;4498:9;4494:22;4474:52;:::i;:::-;4464:62;;4420:116;4575:2;4601:53;4646:7;4637:6;4626:9;4622:22;4601:53;:::i;:::-;4591:63;;4546:118;4703:2;4729:53;4774:7;4765:6;4754:9;4750:22;4729:53;:::i;:::-;4719:63;;4674:118;4182:617;;;;;:::o;4805:118::-;4892:24;4910:5;4892:24;:::i;:::-;4887:3;4880:37;4805:118;;:::o;4929:222::-;5022:4;5060:2;5049:9;5045:18;5037:26;;5073:71;5141:1;5130:9;5126:17;5117:6;5073:71;:::i;:::-;4929:222;;;;:::o;5157:117::-;5266:1;5263;5256:12;5331:243;5416:5;5457:2;5448:6;5443:3;5439:16;5435:25;5432:112;;;5463:79;;:::i;:::-;5432:112;5562:6;5553:15;;5331:243;;;;:::o;5580:710::-;5686:6;5694;5743:2;5731:9;5722:7;5718:23;5714:32;5711:119;;;5749:79;;:::i;:::-;5711:119;5869:1;5894:52;5938:7;5929:6;5918:9;5914:22;5894:52;:::i;:::-;5884:62;;5840:116;6023:2;6012:9;6008:18;5995:32;6054:18;6046:6;6043:30;6040:117;;;6076:79;;:::i;:::-;6040:117;6181:92;6265:7;6256:6;6245:9;6241:22;6181:92;:::i;:::-;6171:102;;5966:317;5580:710;;;;;:::o;6296:90::-;6330:7;6373:5;6366:13;6359:21;6348:32;;6296:90;;;:::o;6392:109::-;6473:21;6488:5;6473:21;:::i;:::-;6468:3;6461:34;6392:109;;:::o;6507:210::-;6594:4;6632:2;6621:9;6617:18;6609:26;;6645:65;6707:1;6696:9;6692:17;6683:6;6645:65;:::i;:::-;6507:210;;;;:::o;6723:1683::-;6884:6;6892;6900;6908;6916;6924;6932;6940;6989:3;6977:9;6968:7;6964:23;6960:33;6957:120;;;6996:79;;:::i;:::-;6957:120;7116:1;7141:52;7185:7;7176:6;7165:9;7161:22;7141:52;:::i;:::-;7131:62;;7087:116;7242:2;7268:51;7311:7;7302:6;7291:9;7287:22;7268:51;:::i;:::-;7258:61;;7213:116;7368:2;7394:52;7438:7;7429:6;7418:9;7414:22;7394:52;:::i;:::-;7384:62;;7339:117;7523:2;7512:9;7508:18;7495:32;7554:18;7546:6;7543:30;7540:117;;;7576:79;;:::i;:::-;7540:117;7681:92;7765:7;7756:6;7745:9;7741:22;7681:92;:::i;:::-;7671:102;;7466:317;7850:3;7839:9;7835:19;7822:33;7882:18;7874:6;7871:30;7868:117;;;7904:79;;:::i;:::-;7868:117;8017:64;8073:7;8064:6;8053:9;8049:22;8017:64;:::i;:::-;7999:82;;;;7793:298;8158:3;8147:9;8143:19;8130:33;8190:18;8182:6;8179:30;8176:117;;;8212:79;;:::i;:::-;8176:117;8325:64;8381:7;8372:6;8361:9;8357:22;8325:64;:::i;:::-;8307:82;;;;8101:298;6723:1683;;;;;;;;;;;:::o;8439:229::-;8510:5;8551:2;8542:6;8537:3;8533:16;8529:25;8526:112;;;8557:79;;:::i;:::-;8526:112;8656:6;8647:15;;8439:229;;;;:::o;8674:522::-;8766:6;8774;8823:2;8811:9;8802:7;8798:23;8794:32;8791:119;;;8829:79;;:::i;:::-;8791:119;8949:1;8974:52;9018:7;9009:6;8998:9;8994:22;8974:52;:::i;:::-;8964:62;;8920:116;9075:2;9101:78;9171:7;9162:6;9151:9;9147:22;9101:78;:::i;:::-;9091:88;;9046:143;8674:522;;;;;:::o;9202:851::-;9315:6;9323;9331;9380:2;9368:9;9359:7;9355:23;9351:32;9348:119;;;9386:79;;:::i;:::-;9348:119;9534:1;9523:9;9519:17;9506:31;9564:18;9556:6;9553:30;9550:117;;;9586:79;;:::i;:::-;9550:117;9691:92;9775:7;9766:6;9755:9;9751:22;9691:92;:::i;:::-;9681:102;;9477:316;9832:2;9858:52;9902:7;9893:6;9882:9;9878:22;9858:52;:::i;:::-;9848:62;;9803:117;9959:2;9985:51;10028:7;10019:6;10008:9;10004:22;9985:51;:::i;:::-;9975:61;;9930:116;9202:851;;;;;:::o;10059:77::-;10096:7;10125:5;10114:16;;10059:77;;;:::o;10142:118::-;10229:24;10247:5;10229:24;:::i;:::-;10224:3;10217:37;10142:118;;:::o;10266:222::-;10359:4;10397:2;10386:9;10382:18;10374:26;;10410:71;10478:1;10467:9;10463:17;10454:6;10410:71;:::i;:::-;10266:222;;;;:::o;10494:955::-;10587:6;10595;10603;10611;10619;10668:3;10656:9;10647:7;10643:23;10639:33;10636:120;;;10675:79;;:::i;:::-;10636:120;10795:1;10820:52;10864:7;10855:6;10844:9;10840:22;10820:52;:::i;:::-;10810:62;;10766:116;10921:2;10947:51;10990:7;10981:6;10970:9;10966:22;10947:51;:::i;:::-;10937:61;;10892:116;11047:2;11073:52;11117:7;11108:6;11097:9;11093:22;11073:52;:::i;:::-;11063:62;;11018:117;11202:2;11191:9;11187:18;11174:32;11233:18;11225:6;11222:30;11219:117;;;11255:79;;:::i;:::-;11219:117;11368:64;11424:7;11415:6;11404:9;11400:22;11368:64;:::i;:::-;11350:82;;;;11145:297;10494:955;;;;;;;;:::o;11455:472::-;11522:6;11530;11579:2;11567:9;11558:7;11554:23;11550:32;11547:119;;;11585:79;;:::i;:::-;11547:119;11705:1;11730:52;11774:7;11765:6;11754:9;11750:22;11730:52;:::i;:::-;11720:62;;11676:116;11831:2;11857:53;11902:7;11893:6;11882:9;11878:22;11857:53;:::i;:::-;11847:63;;11802:118;11455:472;;;;;:::o;11978:238::-;12057:5;12098:3;12089:6;12084:3;12080:16;12076:26;12073:113;;;12105:79;;:::i;:::-;12073:113;12204:6;12195:15;;11978:238;;;;:::o;12222:555::-;12314:6;12363:2;12351:9;12342:7;12338:23;12334:32;12331:119;;;12369:79;;:::i;:::-;12331:119;12517:1;12506:9;12502:17;12489:31;12547:18;12539:6;12536:30;12533:117;;;12569:79;;:::i;:::-;12533:117;12674:86;12752:7;12743:6;12732:9;12728:22;12674:86;:::i;:::-;12664:96;;12460:310;12222:555;;;;:::o;12783:710::-;12889:6;12897;12946:2;12934:9;12925:7;12921:23;12917:32;12914:119;;;12952:79;;:::i;:::-;12914:119;13100:1;13089:9;13085:17;13072:31;13130:18;13122:6;13119:30;13116:117;;;13152:79;;:::i;:::-;13116:117;13257:92;13341:7;13332:6;13321:9;13317:22;13257:92;:::i;:::-;13247:102;;13043:316;13398:2;13424:52;13468:7;13459:6;13448:9;13444:22;13424:52;:::i;:::-;13414:62;;13369:117;12783:710;;;;;:::o;13499:910::-;13617:6;13625;13633;13682:2;13670:9;13661:7;13657:23;13653:32;13650:119;;;13688:79;;:::i;:::-;13650:119;13836:1;13825:9;13821:17;13808:31;13866:18;13858:6;13855:30;13852:117;;;13888:79;;:::i;:::-;13852:117;13993:92;14077:7;14068:6;14057:9;14053:22;13993:92;:::i;:::-;13983:102;;13779:316;14162:2;14151:9;14147:18;14134:32;14193:18;14185:6;14182:30;14179:117;;;14215:79;;:::i;:::-;14179:117;14328:64;14384:7;14375:6;14364:9;14360:22;14328:64;:::i;:::-;14310:82;;;;14105:297;13499:910;;;;;:::o;14432:568::-;14505:8;14515:6;14565:3;14558:4;14550:6;14546:17;14542:27;14532:122;;14573:79;;:::i;:::-;14532:122;14686:6;14673:20;14663:30;;14716:18;14708:6;14705:30;14702:117;;;14738:79;;:::i;:::-;14702:117;14852:4;14844:6;14840:17;14828:29;;14906:3;14898:4;14890:6;14886:17;14876:8;14872:32;14869:41;14866:128;;;14913:79;;:::i;:::-;14866:128;14432:568;;;;;:::o;15006:1135::-;15125:6;15133;15141;15149;15157;15165;15214:3;15202:9;15193:7;15189:23;15185:33;15182:120;;;15221:79;;:::i;:::-;15182:120;15341:1;15366:52;15410:7;15401:6;15390:9;15386:22;15366:52;:::i;:::-;15356:62;;15312:116;15467:2;15493:52;15537:7;15528:6;15517:9;15513:22;15493:52;:::i;:::-;15483:62;;15438:117;15594:2;15620:53;15665:7;15656:6;15645:9;15641:22;15620:53;:::i;:::-;15610:63;;15565:118;15750:2;15739:9;15735:18;15722:32;15781:18;15773:6;15770:30;15767:117;;;15803:79;;:::i;:::-;15767:117;15916:80;15988:7;15979:6;15968:9;15964:22;15916:80;:::i;:::-;15898:98;;;;15693:313;16045:3;16072:52;16116:7;16107:6;16096:9;16092:22;16072:52;:::i;:::-;16062:62;;16016:118;15006:1135;;;;;;;;:::o;16147:567::-;16245:6;16294:2;16282:9;16273:7;16269:23;16265:32;16262:119;;;16300:79;;:::i;:::-;16262:119;16448:1;16437:9;16433:17;16420:31;16478:18;16470:6;16467:30;16464:117;;;16500:79;;:::i;:::-;16464:117;16605:92;16689:7;16680:6;16669:9;16665:22;16605:92;:::i;:::-;16595:102;;16391:316;16147:567;;;;:::o;16720:332::-;16841:4;16879:2;16868:9;16864:18;16856:26;;16892:71;16960:1;16949:9;16945:17;16936:6;16892:71;:::i;:::-;16973:72;17041:2;17030:9;17026:18;17017:6;16973:72;:::i;:::-;16720:332;;;;;:::o;17058:117::-;17167:1;17164;17157:12;17181:102;17222:6;17273:2;17269:7;17264:2;17257:5;17253:14;17249:28;17239:38;;17181:102;;;:::o;17289:180::-;17337:77;17334:1;17327:88;17434:4;17431:1;17424:15;17458:4;17455:1;17448:15;17475:281;17558:27;17580:4;17558:27;:::i;:::-;17550:6;17546:40;17688:6;17676:10;17673:22;17652:18;17640:10;17637:34;17634:62;17631:88;;;17699:18;;:::i;:::-;17631:88;17739:10;17735:2;17728:22;17518:238;17475:281;;:::o;17762:129::-;17796:6;17823:20;;:::i;:::-;17813:30;;17852:33;17880:4;17872:6;17852:33;:::i;:::-;17762:129;;;:::o;18020:108::-;18102:1;18095:5;18092:12;18082:40;;18118:1;18115;18108:12;18082:40;18020:108;:::o;18134:157::-;18189:5;18227:6;18214:20;18205:29;;18243:42;18279:5;18243:42;:::i;:::-;18134:157;;;;:::o;18297:77::-;18334:7;18363:5;18352:16;;18297:77;;;:::o;18380:122::-;18453:24;18471:5;18453:24;:::i;:::-;18446:5;18443:35;18433:63;;18492:1;18489;18482:12;18433:63;18380:122;:::o;18508:139::-;18554:5;18592:6;18579:20;18570:29;;18608:33;18635:5;18608:33;:::i;:::-;18508:139;;;;:::o;18680:581::-;18752:5;18796:4;18784:9;18779:3;18775:19;18771:30;18768:117;;;18804:79;;:::i;:::-;18768:117;18903:21;18919:4;18903:21;:::i;:::-;18894:30;;18983:1;19023:58;19077:3;19068:6;19057:9;19053:22;19023:58;:::i;:::-;19016:4;19009:5;19005:16;18998:84;18934:159;19152:2;19193:49;19238:3;19229:6;19218:9;19214:22;19193:49;:::i;:::-;19186:4;19179:5;19175:16;19168:75;19103:151;18680:581;;;;:::o;19267:375::-;19349:6;19398:2;19386:9;19377:7;19373:23;19369:32;19366:119;;;19404:79;;:::i;:::-;19366:119;19524:1;19549:76;19617:7;19608:6;19597:9;19593:22;19549:76;:::i;:::-;19539:86;;19495:140;19267:375;;;;:::o;19648:180::-;19696:77;19693:1;19686:88;19793:4;19790:1;19783:15;19817:4;19814:1;19807:15","linkReferences":{}},"methodIdentifiers":{"REWARDS_PALLET()":"1948fdbc","ROOT_CHAIN()":"884673ac","blueprintOwner()":"f8407662","canJoin(uint64,(bytes,string))":"760c379f","canLeave(uint64,(bytes,string))":"25489146","currentBlueprintId()":"5d79ea29","masterBlueprintServiceManager()":"0d0dd399","masterBlueprintServiceManagerAddress()":"a4d91fe9","onApprove((bytes,string),uint64,uint8)":"5287cd5f","onBlueprintCreated(uint64,address,address)":"0b6535d7","onJobCall(uint64,uint8,uint64,bytes)":"9838caa3","onJobResult(uint64,uint8,uint64,(bytes,string),bytes,bytes)":"29b98dc7","onOperatorJoined(uint64,(bytes,string))":"89270616","onOperatorLeft(uint64,(bytes,string))":"10f772b8","onRegister((bytes,string),bytes)":"c4b44839","onReject((bytes,string),uint64)":"a9c380e1","onRequest((uint64,address,(bytes,string)[],bytes,address[],uint64,(uint8,bytes32),uint256))":"a40a9527","onServiceInitialized(uint64,uint64,address,address[],uint64)":"d7deb482","onServiceTermination(uint64,address)":"a24e8a90","onSlash(uint64,bytes,uint8)":"7e14b919","onUnappliedSlash(uint64,bytes,uint8)":"0881898f","onUnregister((bytes,string))":"e0503b71","onUpdateRpcAddress((bytes,string))":"dcfee99a","queryDeveloperPaymentAddress(uint64)":"08179f35","queryDisputeOrigin(uint64)":"14b4df4c","queryIsPaymentAssetAllowed(uint64,(uint8,bytes32))":"3c3aa64c","querySlashingOrigin(uint64)":"74ceeb55","rewardsPallet()":"216e8042","rootChain()":"987ab9db"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterBlueprintServiceManager\",\"type\":\"address\"}],\"name\":\"OnlyMasterBlueprintServiceManagerAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rootChain\",\"type\":\"address\"}],\"name\":\"OnlyRootChainAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"}],\"name\":\"UnsupportedAssetKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REWARDS_PALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_CHAIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blueprintOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"canJoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"canLeave\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlueprintId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterBlueprintServiceManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterBlueprintServiceManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mbsm\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"restakingPercent\",\"type\":\"uint8\"}],\"name\":\"onApprove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blueprintId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mbsm\",\"type\":\"address\"}],\"name\":\"onBlueprintCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"job\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"jobCallId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"inputs\",\"type\":\"bytes\"}],\"name\":\"onJobCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"job\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"jobCallId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"inputs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"outputs\",\"type\":\"bytes\"}],\"name\":\"onJobResult\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"onOperatorJoined\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"onOperatorLeft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"registrationInputs\",\"type\":\"bytes\"}],\"name\":\"onRegister\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"onReject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences[]\",\"name\":\"operators\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"requestInputs\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"permittedCallers\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"enum Assets.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"paymentAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ServiceOperators.RequestParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"onRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"permittedCallers\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"onServiceInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"onServiceTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offender\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"slashPercent\",\"type\":\"uint8\"}],\"name\":\"onSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offender\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"slashPercent\",\"type\":\"uint8\"}],\"name\":\"onUnappliedSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"onUnregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"rpcAddress\",\"type\":\"string\"}],\"internalType\":\"struct ServiceOperators.OperatorPreferences\",\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"onUpdateRpcAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"queryDeveloperPaymentAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"developerPaymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"queryDisputeOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"disputeOrigin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"serviceId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"enum Assets.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"asset\",\"type\":\"tuple\"}],\"name\":\"queryIsPaymentAssetAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"querySlashingOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"slashingOrigin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardsPalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rootChainAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is an example of a service blueprint that provides a single service.For all supported hooks, check the `BlueprintServiceManagerBase` contract.\",\"errors\":{\"UnsupportedAssetKind(uint256)\":[{\"details\":\"The asset kind is not supported by the library.\"}]},\"kind\":\"dev\",\"methods\":{\"canJoin(uint64,(bytes,string))\":{\"details\":\"Hook to check if an operator can join a service instance\",\"params\":{\"operator\":\"The operator's preferences and details\",\"serviceId\":\"The ID of the service instance\"},\"returns\":{\"allowed\":\"Returns true if the operator is allowed to join\"}},\"canLeave(uint64,(bytes,string))\":{\"details\":\"Hook to check if an operator can leave a service instance\",\"params\":{\"operator\":\"The operator's preferences and details\",\"serviceId\":\"The ID of the service instance\"},\"returns\":{\"allowed\":\"Returns true if the operator is allowed to leave\"}},\"masterBlueprintServiceManagerAddress()\":{\"details\":\"Get the master blueprint service manager address\",\"returns\":{\"mbsm\":\"The address of the master blueprint service manager\"}},\"onApprove((bytes,string),uint64,uint8)\":{\"details\":\"Hook for service request approval. Called when a service request is approved by an operator.\",\"params\":{\"operator\":\"The operator's details.\",\"requestId\":\"The ID of the request.\",\"restakingPercent\":\"The percentage of the restaking amount (0-100).\"}},\"onBlueprintCreated(uint64,address,address)\":{\"details\":\"Hook to handle blueprint creation. Gets called by the root chain when a new blueprint is created. Could be a good place to store the master blueprint service manager address or any other blueprint related data.\",\"params\":{\"blueprintId\":\"The unique identifier for the blueprint.\",\"mbsm\":\"The address of the master blueprint service manager.\",\"owner\":\"The address of the blueprint owner.\"}},\"onJobCall(uint64,uint8,uint64,bytes)\":{\"details\":\"Hook for job calls on the service. Called when a job is called within the service context.\",\"params\":{\"inputs\":\"Inputs required for the job execution in bytes format.\",\"job\":\"The job identifier.\",\"jobCallId\":\"A unique ID for the job call.\",\"serviceId\":\"The ID of the service where the job is called.\"}},\"onJobResult(uint64,uint8,uint64,(bytes,string),bytes,bytes)\":{\"details\":\"Hook for handling job result. Called when operators send the result of a job execution.\",\"params\":{\"inputs\":\"Inputs used for the job execution in bytes format.\",\"job\":\"The job identifier.\",\"jobCallId\":\"The unique ID for the job call.\",\"operator\":\"The operator sending the result in bytes format.\",\"outputs\":\"Outputs resulting from the job execution in bytes format.\",\"serviceId\":\"The ID of the service related to the job.\"}},\"onOperatorJoined(uint64,(bytes,string))\":{\"details\":\"Hook called after an operator has joined a service instance\",\"params\":{\"operator\":\"The operator's preferences and details\",\"serviceId\":\"The ID of the service instance\"}},\"onOperatorLeft(uint64,(bytes,string))\":{\"details\":\"Hook called after an operator has left a service instance\",\"params\":{\"operator\":\"The operator's preferences and details\",\"serviceId\":\"The ID of the service instance\"}},\"onRegister((bytes,string),bytes)\":{\"details\":\"Hook for service operator registration. Called when a service operator attempts to register with the blueprint.\",\"params\":{\"operator\":\"The operator's details.\",\"registrationInputs\":\"Inputs required for registration in bytes format.\"}},\"onReject((bytes,string),uint64)\":{\"details\":\"Hook for service request rejection. Called when a service request is rejected by an operator.\",\"params\":{\"operator\":\"The operator's details.\",\"requestId\":\"The ID of the request.\"}},\"onRequest((uint64,address,(bytes,string)[],bytes,address[],uint64,(uint8,bytes32),uint256))\":{\"details\":\"Hook for service instance requests. Called when a user requests a service instance from the blueprint but this does not mean the service is initiated yet. To get notified when the service is initiated, implement the `onServiceInitialized` hook.\",\"params\":{\"params\":\"The parameters for the service request.\"}},\"onServiceInitialized(uint64,uint64,address,address[],uint64)\":{\"details\":\"Hook for service initialization. Called when a service is initialized. This hook is called after the service is approved from all of the operators.\",\"params\":{\"owner\":\"The owner of the service.\",\"permittedCallers\":\"The list of permitted callers for the service.\",\"requestId\":\"The ID of the request.\",\"serviceId\":\"The ID of the service.\",\"ttl\":\"The time-to-live for the service.\"}},\"onServiceTermination(uint64,address)\":{\"details\":\"Hook for service termination. Called when a service is terminated.\",\"params\":{\"owner\":\"The owner of the service.\",\"serviceId\":\"The ID of the service to be terminated.\"}},\"onSlash(uint64,bytes,uint8)\":{\"details\":\"Hook for handling applied slashes. Called when a slash is applied to an offender.\",\"params\":{\"offender\":\"The offender's details in bytes format.\",\"serviceId\":\"The ID of the service related to the slash.\",\"slashPercent\":\"The percentage of the slash.\"}},\"onUnappliedSlash(uint64,bytes,uint8)\":{\"details\":\"Hook for handling unapplied slashes. Called when a slash is queued and still not yet applied to an offender.\",\"params\":{\"offender\":\"The offender's details in bytes format.\",\"serviceId\":\"The ID of the service related to the slash.\",\"slashPercent\":\"The percentage of the slash.\"}},\"onUnregister((bytes,string))\":{\"details\":\"Hook for service operator unregistration. Called when a service operator attempts to unregister from the blueprint.\",\"params\":{\"operator\":\"The operator's details.\"}},\"onUpdateRpcAddress((bytes,string))\":{\"details\":\"Hook for updating RPC address. Called when an operator updates their RPC address.\",\"params\":{\"operator\":\"The operator's details with the updated RPC address.\"}},\"queryDeveloperPaymentAddress(uint64)\":{\"details\":\"Query the developer payment address for a service. This mainly used by the runtime or the Master Blueprint Service Manager to determine the developer payment address for a service.\",\"params\":{\"serviceId\":\"The ID of the service.\"},\"returns\":{\"developerPaymentAddress\":\"The address of the developer payment address for that service\"}},\"queryDisputeOrigin(uint64)\":{\"details\":\"Query the dispute origin for a service. This mainly used by the runtime to determine the allowed account that can dispute an unapplied slash and remove it. by default, the service manager is the only account that can dispute a service. override this function to allow other accounts to dispute a service.\",\"params\":{\"serviceId\":\"The ID of the service.\"},\"returns\":{\"disputeOrigin\":\"The account that can dispute the unapplied slash for that service\"}},\"queryIsPaymentAssetAllowed(uint64,(uint8,bytes32))\":{\"details\":\"Determines if a specified payment asset is permitted for a given service.\",\"params\":{\"asset\":\"The asset to verify for allowance.\",\"serviceId\":\"The ID of the service to check against.\"},\"returns\":{\"isAllowed\":\"Returns true if the asset is allowed, false otherwise.\"}},\"querySlashingOrigin(uint64)\":{\"details\":\"Query the slashing origin for a service. This mainly used by the runtime to determine the allowed account that can slash a service. by default, the service manager is the only account that can slash a service. override this function to allow other accounts to slash a service.\",\"params\":{\"serviceId\":\"The ID of the service.\"},\"returns\":{\"slashingOrigin\":\"The account that can slash the offender.\"}},\"rewardsPallet()\":{\"details\":\"Get the rewards pallet address\",\"returns\":{\"rewardsPalletAddress\":\"The address of the rewards pallet\"}},\"rootChain()\":{\"details\":\"Get the root chain address\",\"returns\":{\"rootChainAddress\":\"The address of the root chain\"}}},\"title\":\"ExperimentalBlueprint\",\"version\":1},\"userdoc\":{\"errors\":{\"OnlyMasterBlueprintServiceManagerAllowed(address,address)\":[{\"notice\":\"Error message for unauthorized access\"}],\"OnlyRootChainAllowed(address,address)\":[{\"notice\":\"Error message for unauthorized access\"}]},\"kind\":\"user\",\"methods\":{\"REWARDS_PALLET()\":{\"notice\":\"The address of the rewards pallet\"},\"ROOT_CHAIN()\":{\"notice\":\"The address of the root chain\"},\"queryDeveloperPaymentAddress(uint64)\":{\"notice\":\"This function should be implemented by the Blueprint Service Manager contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/ExperimentalBlueprint.sol\":\"ExperimentalBlueprint\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin-contracts-5.1.0/=dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/\",\":@openzeppelin/contracts/=dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/\",\":forge-std-1.9.4/=dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/\",\":forge-std/=dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/\",\":tnt-core-0.3.0/=dependencies/tnt-core-0.3.0/\",\":tnt-core/=dependencies/tnt-core-0.3.0/src/\"]},\"sources\":{\"contracts/src/ExperimentalBlueprint.sol\":{\"keccak256\":\"0x2e82123c72245a469f19c4f98dc0f6ac77f4ce3aaae3695af97742ca8fe7b9c4\",\"license\":\"UNLICENSE\",\"urls\":[\"bzz-raw://2bc3ad66c3f384a310fde9397c3ae053a584bb551c061950eb6a9eae28958ebf\",\"dweb:/ipfs/QmTcN5FbRf3GMocBYowqkWYmbGKLV4PMkQCehSL12sfViy\"]},\"dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f\",\"dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz\"]},\"dependencies/tnt-core-0.3.0/src/BlueprintServiceManagerBase.sol\":{\"keccak256\":\"0xab6375ae203f4e954ee381a642a39939333f58c0229674692459062eb5665b38\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9fbfed9f9edcb6adba70a6c7cfea78e446db4924a9d3705353c69891c471ffba\",\"dweb:/ipfs/QmVhqejHXo7AHonGLuQbaiCM76XigUSfuTn9hjWDzi4Hwo\"]},\"src/AssetsLib.sol\":{\"keccak256\":\"0xed4ff5cfdc3c07601ccb4424befd7cf9f9a66288dbec113b5c061eb9df848c9b\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://69bb3aece25285b93753630bf1501118c418f6f2e3c9245907bd17b10c307f49\",\"dweb:/ipfs/Qmcn5EtQbwRpgJw8pfFh1Ji7d3K4wLCvM4fsZdtdui5zLh\"]},\"src/IBlueprintServiceManager.sol\":{\"keccak256\":\"0x40aed9e73975392036be159777eed6520a28e078b2e87f74a6eddb1fb1f485be\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://1da45d34e49318f11dfd2b6497831061b149cb8b9a54287de435a6b7ae705e31\",\"dweb:/ipfs/QmUXaxVWuTEN1JvKtriEZ1JsKfBGJbsP65FVikpjXqMjnE\"]},\"src/Permissions.sol\":{\"keccak256\":\"0xcb9b4d6badf8849f22a03d466fde3ed53fe491dbefbc1f578dd09b3a7b2c8b96\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://0bf4bfc91efbd465b09a37241acc19ac0f4fee5e2807e5598f787ba5c2368e2a\",\"dweb:/ipfs/QmbSK9adP3axpecxHgTCc57zLi8cDKsjrMFosRmxTYTZue\"]},\"src/ServiceOperatorsLib.sol\":{\"keccak256\":\"0x3ff42db82165bb146f646f1fa901058bfa972ae6eb1488afeb0b3ebedda74666\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://546d82b1619217587a3490d3e4156c6c9affde9f214defd9f3a6c97f4bc65f93\",\"dweb:/ipfs/QmdpRSCz2cikRzWFbtiqP1kXYA1A2HKCeHE6bp2Nxo938r\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"masterBlueprintServiceManager","type":"address"}],"type":"error","name":"OnlyMasterBlueprintServiceManagerAllowed"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"rootChain","type":"address"}],"type":"error","name":"OnlyRootChainAllowed"},{"inputs":[{"internalType":"uint256","name":"kind","type":"uint256"}],"type":"error","name":"UnsupportedAssetKind"},{"inputs":[],"stateMutability":"view","type":"function","name":"REWARDS_PALLET","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"ROOT_CHAIN","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"blueprintOwner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]}],"stateMutability":"view","type":"function","name":"canJoin","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}]},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]}],"stateMutability":"view","type":"function","name":"canLeave","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"currentBlueprintId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"masterBlueprintServiceManager","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"masterBlueprintServiceManagerAddress","outputs":[{"internalType":"address","name":"mbsm","type":"address"}]},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]},{"internalType":"uint64","name":"requestId","type":"uint64"},{"internalType":"uint8","name":"restakingPercent","type":"uint8"}],"stateMutability":"payable","type":"function","name":"onApprove"},{"inputs":[{"internalType":"uint64","name":"blueprintId","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"mbsm","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"onBlueprintCreated"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"uint8","name":"job","type":"uint8"},{"internalType":"uint64","name":"jobCallId","type":"uint64"},{"internalType":"bytes","name":"inputs","type":"bytes"}],"stateMutability":"payable","type":"function","name":"onJobCall"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"uint8","name":"job","type":"uint8"},{"internalType":"uint64","name":"jobCallId","type":"uint64"},{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]},{"internalType":"bytes","name":"inputs","type":"bytes"},{"internalType":"bytes","name":"outputs","type":"bytes"}],"stateMutability":"payable","type":"function","name":"onJobResult"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]}],"stateMutability":"nonpayable","type":"function","name":"onOperatorJoined"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]}],"stateMutability":"nonpayable","type":"function","name":"onOperatorLeft"},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]},{"internalType":"bytes","name":"registrationInputs","type":"bytes"}],"stateMutability":"payable","type":"function","name":"onRegister"},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]},{"internalType":"uint64","name":"requestId","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"onReject"},{"inputs":[{"internalType":"struct ServiceOperators.RequestParams","name":"params","type":"tuple","components":[{"internalType":"uint64","name":"requestId","type":"uint64"},{"internalType":"address","name":"requester","type":"address"},{"internalType":"struct ServiceOperators.OperatorPreferences[]","name":"operators","type":"tuple[]","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]},{"internalType":"bytes","name":"requestInputs","type":"bytes"},{"internalType":"address[]","name":"permittedCallers","type":"address[]"},{"internalType":"uint64","name":"ttl","type":"uint64"},{"internalType":"struct Assets.Asset","name":"paymentAsset","type":"tuple","components":[{"internalType":"enum Assets.Kind","name":"kind","type":"uint8"},{"internalType":"bytes32","name":"data","type":"bytes32"}]},{"internalType":"uint256","name":"amount","type":"uint256"}]}],"stateMutability":"payable","type":"function","name":"onRequest"},{"inputs":[{"internalType":"uint64","name":"requestId","type":"uint64"},{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"permittedCallers","type":"address[]"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"onServiceInitialized"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"onServiceTermination"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"bytes","name":"offender","type":"bytes"},{"internalType":"uint8","name":"slashPercent","type":"uint8"}],"stateMutability":"nonpayable","type":"function","name":"onSlash"},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"bytes","name":"offender","type":"bytes"},{"internalType":"uint8","name":"slashPercent","type":"uint8"}],"stateMutability":"nonpayable","type":"function","name":"onUnappliedSlash"},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]}],"stateMutability":"nonpayable","type":"function","name":"onUnregister"},{"inputs":[{"internalType":"struct ServiceOperators.OperatorPreferences","name":"operator","type":"tuple","components":[{"internalType":"bytes","name":"ecdsaPublicKey","type":"bytes"},{"internalType":"string","name":"rpcAddress","type":"string"}]}],"stateMutability":"payable","type":"function","name":"onUpdateRpcAddress"},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function","name":"queryDeveloperPaymentAddress","outputs":[{"internalType":"address payable","name":"developerPaymentAddress","type":"address"}]},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function","name":"queryDisputeOrigin","outputs":[{"internalType":"address","name":"disputeOrigin","type":"address"}]},{"inputs":[{"internalType":"uint64","name":"serviceId","type":"uint64"},{"internalType":"struct Assets.Asset","name":"asset","type":"tuple","components":[{"internalType":"enum Assets.Kind","name":"kind","type":"uint8"},{"internalType":"bytes32","name":"data","type":"bytes32"}]}],"stateMutability":"view","type":"function","name":"queryIsPaymentAssetAllowed","outputs":[{"internalType":"bool","name":"isAllowed","type":"bool"}]},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function","name":"querySlashingOrigin","outputs":[{"internalType":"address","name":"slashingOrigin","type":"address"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"rewardsPallet","outputs":[{"internalType":"address","name":"rewardsPalletAddress","type":"address"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"rootChain","outputs":[{"internalType":"address","name":"rootChainAddress","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"canJoin(uint64,(bytes,string))":{"details":"Hook to check if an operator can join a service instance","params":{"operator":"The operator's preferences and details","serviceId":"The ID of the service instance"},"returns":{"allowed":"Returns true if the operator is allowed to join"}},"canLeave(uint64,(bytes,string))":{"details":"Hook to check if an operator can leave a service instance","params":{"operator":"The operator's preferences and details","serviceId":"The ID of the service instance"},"returns":{"allowed":"Returns true if the operator is allowed to leave"}},"masterBlueprintServiceManagerAddress()":{"details":"Get the master blueprint service manager address","returns":{"mbsm":"The address of the master blueprint service manager"}},"onApprove((bytes,string),uint64,uint8)":{"details":"Hook for service request approval. Called when a service request is approved by an operator.","params":{"operator":"The operator's details.","requestId":"The ID of the request.","restakingPercent":"The percentage of the restaking amount (0-100)."}},"onBlueprintCreated(uint64,address,address)":{"details":"Hook to handle blueprint creation. Gets called by the root chain when a new blueprint is created. Could be a good place to store the master blueprint service manager address or any other blueprint related data.","params":{"blueprintId":"The unique identifier for the blueprint.","mbsm":"The address of the master blueprint service manager.","owner":"The address of the blueprint owner."}},"onJobCall(uint64,uint8,uint64,bytes)":{"details":"Hook for job calls on the service. Called when a job is called within the service context.","params":{"inputs":"Inputs required for the job execution in bytes format.","job":"The job identifier.","jobCallId":"A unique ID for the job call.","serviceId":"The ID of the service where the job is called."}},"onJobResult(uint64,uint8,uint64,(bytes,string),bytes,bytes)":{"details":"Hook for handling job result. Called when operators send the result of a job execution.","params":{"inputs":"Inputs used for the job execution in bytes format.","job":"The job identifier.","jobCallId":"The unique ID for the job call.","operator":"The operator sending the result in bytes format.","outputs":"Outputs resulting from the job execution in bytes format.","serviceId":"The ID of the service related to the job."}},"onOperatorJoined(uint64,(bytes,string))":{"details":"Hook called after an operator has joined a service instance","params":{"operator":"The operator's preferences and details","serviceId":"The ID of the service instance"}},"onOperatorLeft(uint64,(bytes,string))":{"details":"Hook called after an operator has left a service instance","params":{"operator":"The operator's preferences and details","serviceId":"The ID of the service instance"}},"onRegister((bytes,string),bytes)":{"details":"Hook for service operator registration. Called when a service operator attempts to register with the blueprint.","params":{"operator":"The operator's details.","registrationInputs":"Inputs required for registration in bytes format."}},"onReject((bytes,string),uint64)":{"details":"Hook for service request rejection. Called when a service request is rejected by an operator.","params":{"operator":"The operator's details.","requestId":"The ID of the request."}},"onRequest((uint64,address,(bytes,string)[],bytes,address[],uint64,(uint8,bytes32),uint256))":{"details":"Hook for service instance requests. Called when a user requests a service instance from the blueprint but this does not mean the service is initiated yet. To get notified when the service is initiated, implement the `onServiceInitialized` hook.","params":{"params":"The parameters for the service request."}},"onServiceInitialized(uint64,uint64,address,address[],uint64)":{"details":"Hook for service initialization. Called when a service is initialized. This hook is called after the service is approved from all of the operators.","params":{"owner":"The owner of the service.","permittedCallers":"The list of permitted callers for the service.","requestId":"The ID of the request.","serviceId":"The ID of the service.","ttl":"The time-to-live for the service."}},"onServiceTermination(uint64,address)":{"details":"Hook for service termination. Called when a service is terminated.","params":{"owner":"The owner of the service.","serviceId":"The ID of the service to be terminated."}},"onSlash(uint64,bytes,uint8)":{"details":"Hook for handling applied slashes. Called when a slash is applied to an offender.","params":{"offender":"The offender's details in bytes format.","serviceId":"The ID of the service related to the slash.","slashPercent":"The percentage of the slash."}},"onUnappliedSlash(uint64,bytes,uint8)":{"details":"Hook for handling unapplied slashes. Called when a slash is queued and still not yet applied to an offender.","params":{"offender":"The offender's details in bytes format.","serviceId":"The ID of the service related to the slash.","slashPercent":"The percentage of the slash."}},"onUnregister((bytes,string))":{"details":"Hook for service operator unregistration. Called when a service operator attempts to unregister from the blueprint.","params":{"operator":"The operator's details."}},"onUpdateRpcAddress((bytes,string))":{"details":"Hook for updating RPC address. Called when an operator updates their RPC address.","params":{"operator":"The operator's details with the updated RPC address."}},"queryDeveloperPaymentAddress(uint64)":{"details":"Query the developer payment address for a service. This mainly used by the runtime or the Master Blueprint Service Manager to determine the developer payment address for a service.","params":{"serviceId":"The ID of the service."},"returns":{"developerPaymentAddress":"The address of the developer payment address for that service"}},"queryDisputeOrigin(uint64)":{"details":"Query the dispute origin for a service. This mainly used by the runtime to determine the allowed account that can dispute an unapplied slash and remove it. by default, the service manager is the only account that can dispute a service. override this function to allow other accounts to dispute a service.","params":{"serviceId":"The ID of the service."},"returns":{"disputeOrigin":"The account that can dispute the unapplied slash for that service"}},"queryIsPaymentAssetAllowed(uint64,(uint8,bytes32))":{"details":"Determines if a specified payment asset is permitted for a given service.","params":{"asset":"The asset to verify for allowance.","serviceId":"The ID of the service to check against."},"returns":{"isAllowed":"Returns true if the asset is allowed, false otherwise."}},"querySlashingOrigin(uint64)":{"details":"Query the slashing origin for a service. This mainly used by the runtime to determine the allowed account that can slash a service. by default, the service manager is the only account that can slash a service. override this function to allow other accounts to slash a service.","params":{"serviceId":"The ID of the service."},"returns":{"slashingOrigin":"The account that can slash the offender."}},"rewardsPallet()":{"details":"Get the rewards pallet address","returns":{"rewardsPalletAddress":"The address of the rewards pallet"}},"rootChain()":{"details":"Get the root chain address","returns":{"rootChainAddress":"The address of the root chain"}}},"version":1},"userdoc":{"kind":"user","methods":{"REWARDS_PALLET()":{"notice":"The address of the rewards pallet"},"ROOT_CHAIN()":{"notice":"The address of the root chain"},"queryDeveloperPaymentAddress(uint64)":{"notice":"This function should be implemented by the Blueprint Service Manager contract."}},"version":1}},"settings":{"remappings":["@openzeppelin-contracts-5.1.0/=dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/","@openzeppelin/contracts/=dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/","forge-std-1.9.4/=dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/","forge-std/=dependencies/tnt-core-0.3.0/dependencies/forge-std-1.9.4/src/","tnt-core-0.3.0/=dependencies/tnt-core-0.3.0/","tnt-core/=dependencies/tnt-core-0.3.0/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/src/ExperimentalBlueprint.sol":"ExperimentalBlueprint"},"evmVersion":"cancun","libraries":{}},"sources":{"contracts/src/ExperimentalBlueprint.sol":{"keccak256":"0x2e82123c72245a469f19c4f98dc0f6ac77f4ce3aaae3695af97742ca8fe7b9c4","urls":["bzz-raw://2bc3ad66c3f384a310fde9397c3ae053a584bb551c061950eb6a9eae28958ebf","dweb:/ipfs/QmTcN5FbRf3GMocBYowqkWYmbGKLV4PMkQCehSL12sfViy"],"license":"UNLICENSE"},"dependencies/tnt-core-0.3.0/dependencies/@openzeppelin-contracts-5.1.0/utils/structs/EnumerableSet.sol":{"keccak256":"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212","urls":["bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f","dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz"],"license":"MIT"},"dependencies/tnt-core-0.3.0/src/BlueprintServiceManagerBase.sol":{"keccak256":"0xab6375ae203f4e954ee381a642a39939333f58c0229674692459062eb5665b38","urls":["bzz-raw://9fbfed9f9edcb6adba70a6c7cfea78e446db4924a9d3705353c69891c471ffba","dweb:/ipfs/QmVhqejHXo7AHonGLuQbaiCM76XigUSfuTn9hjWDzi4Hwo"],"license":"UNLICENSED"},"src/AssetsLib.sol":{"keccak256":"0xed4ff5cfdc3c07601ccb4424befd7cf9f9a66288dbec113b5c061eb9df848c9b","urls":["bzz-raw://69bb3aece25285b93753630bf1501118c418f6f2e3c9245907bd17b10c307f49","dweb:/ipfs/Qmcn5EtQbwRpgJw8pfFh1Ji7d3K4wLCvM4fsZdtdui5zLh"],"license":"UNLICENSED"},"src/IBlueprintServiceManager.sol":{"keccak256":"0x40aed9e73975392036be159777eed6520a28e078b2e87f74a6eddb1fb1f485be","urls":["bzz-raw://1da45d34e49318f11dfd2b6497831061b149cb8b9a54287de435a6b7ae705e31","dweb:/ipfs/QmUXaxVWuTEN1JvKtriEZ1JsKfBGJbsP65FVikpjXqMjnE"],"license":"UNLICENSED"},"src/Permissions.sol":{"keccak256":"0xcb9b4d6badf8849f22a03d466fde3ed53fe491dbefbc1f578dd09b3a7b2c8b96","urls":["bzz-raw://0bf4bfc91efbd465b09a37241acc19ac0f4fee5e2807e5598f787ba5c2368e2a","dweb:/ipfs/QmbSK9adP3axpecxHgTCc57zLi8cDKsjrMFosRmxTYTZue"],"license":"UNLICENSED"},"src/ServiceOperatorsLib.sol":{"keccak256":"0x3ff42db82165bb146f646f1fa901058bfa972ae6eb1488afeb0b3ebedda74666","urls":["bzz-raw://546d82b1619217587a3490d3e4156c6c9affde9f214defd9f3a6c97f4bc65f93","dweb:/ipfs/QmdpRSCz2cikRzWFbtiqP1kXYA1A2HKCeHE6bp2Nxo938r"],"license":"UNLICENSED"}},"version":1},"id":0}
"#,
    ).expect("Failed to create mock contract JSON file");

    // Create a simple forge.toml file to avoid Foundry trying to build anything
    fs::write(
        blueprint_dir.join("foundry.toml"),
        r#"[profile.default]
src = "contracts"
out = "contracts/out"
libs = ["lib"]
"#,
    )
    .expect("Failed to write foundry.toml");

    // Create Cargo.toml
    fs::write(
        blueprint_dir.join("Cargo.toml"),
        format!(
            r#"[package]
name = "incredible-squaring-blueprint"
version = "0.1.0"
edition = "2024"

[dependencies]
blueprint-sdk = {{ path = "{}/crates/sdk", features = ["std", "tangle", "macros"] }}
tokio = {{ version = "1.43.0", features = ["rt-multi-thread", "sync", "macros"] }}
tracing-subscriber = {{ version = "0.3.19", features = ["env-filter"] }}
tracing = "0.1.41"
tower = {{ version = "0.5.2", default-features = false }}

[package.metadata.blueprint]
manager = {{ Evm = "ExperimentalBlueprint" }}
master_revision = "Latest"
"#,
            crates_dir.display(),
        ),
    )
    .expect("Failed to write Cargo.toml");

    // Create blueprint.json
    fs::write(
        blueprint_dir.join("blueprint.json"),
        format!(
            r#"{{
  "metadata": {{
    "name": "experiment",
    "description": "A Simple Blueprint to demo how blueprints work on Tangle Network",
    "author": "Tangle Network",
    "category": null,
    "code_repository": "https://github.com/tangle-network/blueprint",
    "logo": null,
    "website": "https://tangle.tools",
    "license": "MIT OR Apache-2.0"
  }},
  "manager": {{
    "Evm": "contracts/out/ExperimentalBlueprint.sol/ExperimentalBlueprint.json"
  }},
  "master_manager_revision": "Latest",
  "jobs": [
    {{
      "job_id": 0,
      "metadata": {{
        "name": "xsquare",
        "description": "Returns x^2 saturating to [`u64::MAX`] if overflow occurs."
      }},
      "params": [
        "Uint64"
      ],
      "result": [
        "Uint64"
      ]
    }}
  ],
  "registration_params": [],
  "request_params": [],
  "sources": [
    {{
      "type": "Testing",
      "cargo_package": "incredible-squaring-blueprint",
      "cargo_bin": "main",
      "base_path": "{}"
    }}
  ]
}}"#,
            blueprint_dir.display()
        ),
    )
    .expect("Failed to write blueprint.json");

    // Create main.rs (combined lib.rs and main.rs)
    fs::write(
        blueprint_dir.join("src").join("main.rs"),
        r#"use blueprint_sdk::Job;
use blueprint_sdk::Router;
use blueprint_sdk::contexts::tangle::TangleClientContext;
use blueprint_sdk::crypto::sp_core::SpSr25519;
use blueprint_sdk::crypto::tangle_pair_signer::TanglePairSigner;
use blueprint_sdk::keystore::backends::Backend;
use blueprint_sdk::runner::BackgroundService;
use blueprint_sdk::runner::BlueprintRunner;
use blueprint_sdk::runner::config::BlueprintEnvironment;
use blueprint_sdk::runner::error::RunnerError;
use blueprint_sdk::runner::tangle::config::TangleConfig;
use blueprint_sdk::tangle::consumer::TangleConsumer;
use blueprint_sdk::tangle::extract::{TangleArg, TangleResult};
use blueprint_sdk::tangle::filters::MatchesServiceId;
use blueprint_sdk::tangle::layers::TangleLayer;
use blueprint_sdk::tangle::producer::TangleProducer;
use tokio::sync::oneshot;
use tokio::sync::oneshot::Receiver;
use tower::filter::FilterLayer;
use tracing::error;
use tracing::level_filters::LevelFilter;

// The job ID
pub const XSQUARE_JOB_ID: u32 = 0;

// The job function
pub async fn square(TangleArg(x): TangleArg<u64>) -> TangleResult<u64> {
    let result = x * x;

    // The result is then converted into a `JobResult` to be sent back to the caller.
    TangleResult(result)
}

#[derive(Clone)]
pub struct FooBackgroundService;

impl BackgroundService for FooBackgroundService {
    async fn start(&self) -> Result<Receiver<Result<(), RunnerError>>, RunnerError> {
        let (tx, rx) = oneshot::channel();
        tokio::spawn(async move {
            let _ = tx.send(Ok(()));
        });
        Ok(rx)
    }
}

#[tokio::main]
async fn main() -> Result<(), blueprint_sdk::Error> {
    setup_log();

    let env = BlueprintEnvironment::load()?;
    let sr25519_signer = env.keystore().first_local::<SpSr25519>()?;
    let sr25519_pair = env.keystore().get_secret::<SpSr25519>(&sr25519_signer)?;
    let st25519_signer = TanglePairSigner::new(sr25519_pair.0);

    let tangle_client = env.tangle_client().await?;
    let tangle_producer = TangleProducer::finalized_blocks(tangle_client.rpc_client.clone()).await?;
    let tangle_consumer = TangleConsumer::new(tangle_client.rpc_client.clone(), st25519_signer);

    let tangle_config = TangleConfig::default();

    let service_id = env.protocol_settings.tangle()?.service_id.unwrap();
    let result = BlueprintRunner::builder(tangle_config, env)
        .router(
            // A router
            //
            // Each "route" is a job ID and the job function. We can also support arbitrary `Service`s from `tower`,
            // which may make it easier for people to port over existing services to a blueprint.
            Router::new()
                // The route defined here has a `TangleLayer`, which adds metadata to the
                // produced `JobResult`s, making it visible to a `TangleConsumer`.
                .route(XSQUARE_JOB_ID, square.layer(TangleLayer))
                // Add the `FilterLayer` to filter out job calls that don't match the service ID
                .layer(FilterLayer::new(MatchesServiceId(service_id))),
        )
        .background_service(FooBackgroundService)
        // Add potentially many producers
        //
        // A producer is simply a `Stream` that outputs `JobCall`s, which are passed down to the intended
        // job functions.
        .producer(tangle_producer)
        // Add potentially many consumers
        //
        // A consumer is simply a `Sink` that consumes `JobResult`s, which are the output of the job functions.
        // Every result will be passed to every consumer. It is the responsibility of the consumer
        // to determine whether or not to process a result.
        .consumer(tangle_consumer)
        // Custom shutdown handlers
        //
        // Now users can specify what to do when an error occurs and the runner is shutting down.
        // That can be cleanup logic, finalizing database transactions, etc.
        .with_shutdown_handler(async { println!("Shutting down!") })
        .run()
        .await;

    if let Err(e) = result {
        error!("Runner failed! {e:?}");
    }

    Ok(())
}

pub fn setup_log() {
    use tracing_subscriber::util::SubscriberInitExt;

    let _ = tracing_subscriber::fmt::SubscriberBuilder::default()
        .without_time()
        .with_span_events(tracing_subscriber::fmt::format::FmtSpan::NONE)
        .with_env_filter(
            tracing_subscriber::EnvFilter::builder()
                .with_default_directive(LevelFilter::INFO.into())
                .from_env_lossy(),
        )
        .finish()
        .try_init();
}"#,
    ).expect("Failed to write main.rs");
    (temp_dir, blueprint_dir)
}
